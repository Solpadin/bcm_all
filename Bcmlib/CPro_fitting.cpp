#include "stdafx.h"

#include "cprofile.h"
#include "cpro_fitting.h"

#ifndef ___ABRIDGE_PROFILE_MODE___
#include "cfitting.h"
#include "CCells.h"
#endif
#include "unit_mes.h"

#ifdef ___WINDOWS_LOG_MESSAGE___
#define  Message(Msg)    theMainFrame->Message(Msg)
#else
#define  Message(Msg)    printf(Msg);  printf("\n")
#endif

#ifdef ___PRO_FITTING_cpp___
///////////////////////////////////////////////////
//...число типов защитного оборудования и их имена;
int    GetFITTINGSampleCount(void) { return(NUM_FITTING_SAMPLES); }
char * GetFITTINGSampleName (int N_sm)
{
  static char * S[] = { "НС",  //_FITTING1
                        "ПС",  //_FITTING2
                        "ПЗС", //_FITTING3
                        "ГВ",  //_FITTING4
  };
  return S[N_sm];
}
char * GetFITTINGGOSTName (int N_sm)
{
  static char * S[] = { "ЭССП", //_FITTING1
                        "ЭССП", //_FITTING2
                        "ЭССП", //_FITTING3
                        "ЭССП", //_FITTING4
  };
  return S[N_sm];
}

/*==================================================================*/
/*                 ТАБЛИЦЫ ЗАЩИТНОГО ОБОРУДОВАНИЯ                   */
/*==================================================================*/
//////////////////////////////////
//...таблицы для натяжных зажимов;
Table * fitting_NS(int id_static_char)
{
	static char * Section [] = { NULL, "35/6,2", "50/8",   "70/11",  "95/16",  "120/19", "120/27", "150/19", "150/24", "150/34", "185/29", 
												"185/24", "185/43", "205/27", "240/32", "240/39", "240/56", "300/39", "300/48", "300/67", "330/30", 
												"330/43", "400/18", "400/22", "400/51", "48.64, 50.45", "70.95", "70/39", "70/72" };
	static char * D_sect  [] = { NULL,  "8.4",  "9.6", "11.4", "13.5", "15.2", "15.4", "16.8", "17.1", "17.5", "18.8", 
												"18.9", "19.6", "19.8", "21.6", "21.6", "22.4", "24.0", "24.1", "24.5", "24.8", 
												"25.2", "26.0", "26.6", "27.5", "9.1, 9.2", "11.0", "13.3", "15.4" };
	static double L       [] = { 0.,  650.,  700.,  800.,  900., 1100., 1100., 1300., 1300., 1350., 1450., 
												1450., 1500., 1500., 1550., 1550., 1600., 1600., 1600., 1700., 1700., 
												1750., 1750., 1750., 1800., 1100., 1250., 1300,  1450. };
	static double L1      [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
			 									MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 1800., 1800., 2000., 2300. };
	static double mass    [] = { 0., 0.7, 0.8, 1.4, 1.7, 2.0, 2.0, 2.4, 2.4, 2.7, 2.8, 
												3.0, 3.3, 3.4, 3.8, 3.8, 4.0, 4.2, 4.2, 4.8, 4.6, 
												4.8, 4.9, 4.9, 5.5, 3.0, 4.2, 4.6, 5.9 };
	static char * thimble [] = { NULL, "K-25",  "K-25",  "K-70",  "K-70",  "K-70",  "K-70",  "K-70",  "K-70",  "K-70",  "K-70", 
												"K-70",  "K-120", "K-120", "K-120", "K-120", "K-120", "K-120", "K-120", "K-160", "K-120", 
												"K-160", "K-120", "K-120", "K-160", "K-70",  "K-120", "K-120", "K-120" };
/////////////////////////////////////////////////////////////////////
//...заполнить данные по структуре зажима (из технологической карты);
	static int    N_pr    [] = { 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				 								0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0 };
	static double diam    [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	static double alpha   [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
				 								MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	static double E_module[] = { 0., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 
												200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 
												200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000. };
	static double nju     [] = { 0., 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 											
												0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 
												0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29 };
	static double A_temp  [] = { 0., 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 
												1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 
												1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5 };
//...заполнить данные по структуре зажима (из технологической карты);
/////////////////////////////////////////////////////////////////////
	static char * S0[] = { "8,4-01",  "9,6-01",  "11,4-01", "13,5-01",     "15,2-01",     "15,4-01",  "16,8-01",  "17,1-01", "17,5-01", "18,8-01", 
								  "18,9-01", "19,6-01", "19,8-01", "21,6/7,2-01", "21,6/8,0-01", "22,4-01",  "24,0-01",  "24,1-01", "24,5-01", "24,8-01", 
								  "25,2-01", "26,0-01", "26,6-01", "27,5-01",     "9,1П-01",     "11,0П-01", "13,3П-01", "15,4/11,0П-01" };

	Shablon  records[] = {	{			  CHAR_TYPE_RECORD, "Марка сечения"},	   //(0) -- Section
									{	DLENGTH_CHAR_TYPE_RECORD, "Диаметр сечения"},	//(1) -- D_sect
									{	 	  DLENGTH_TYPE_RECORD, "Длина зажима"},		//(2) -- L
									{		  DLENGTH_TYPE_RECORD, "Длина протектора"},  //(3) -- L1
									{			 DMASS_TYPE_RECORD, "Масса с коушем"},	   //(4) -- mass
									{			  CHAR_TYPE_RECORD, "Марка коуша"},		   //(5) -- thimble
									{				INT_TYPE_RECORD, "Число проволок"},	   //(6) -- N_pr
									{		  DLENGTH_TYPE_RECORD, "Диаметр проволоки"}, //(7) -- diam																
									{			DANGLE_TYPE_RECORD, "Угол наклона"},		//(8) -- alpha
									{		  DSTRESS_TYPE_RECORD, "Модуль упругости"},  //(9) -- E_module
									{			DOUBLE_TYPE_RECORD, "Коэф. Пуассона"},	   //(10) -- nju
									{DTEMPER_EXTENT_TYPE_RECORD, "Коэф. темп. расш."}, //(11) -- A_temp
	};
	Table * table = get_shablon_table(12, 28, records, S0, id_static_char);

	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = Section;
		table->table[1].parm_values = D_sect;
		table->table[2].parm_values = L;
		table->table[3].parm_values = L1;
		table->table[4].parm_values = mass;
		table->table[5].parm_values = thimble;
		table->table[6].parm_values = N_pr;
		table->table[7].parm_values = diam;
		table->table[8].parm_values = alpha;
		table->table[9].parm_values = E_module;
		table->table[10].parm_values = nju;
		table->table[11].parm_values = A_temp;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = Section[k];
		((char  **)(table->table[1].parm_values))[k] = D_sect[k];
		((double *)(table->table[2].parm_values))[k] = L[k];
		((double *)(table->table[3].parm_values))[k] = L1[k];
		((double *)(table->table[4].parm_values))[k] = mass[k];
		((char  **)(table->table[5].parm_values))[k] = thimble[k];
		((int    *)(table->table[6].parm_values))[k] = N_pr[k];
		((double *)(table->table[7].parm_values))[k] = diam[k];
		((double *)(table->table[8].parm_values))[k] = alpha[k];
		((double *)(table->table[9].parm_values))[k] = E_module[k];
		((double *)(table->table[10].parm_values))[k] = nju[k];
		((double *)(table->table[11].parm_values))[k] = A_temp[k];
	}
	return table;
}

//////////////////////////////////////////////////////////////////////
//...таблицы для поддерживающих зажимов (протектор вместе с лодочкой);
Table * fitting_PS(int id_static_char)
{
	static char * Wire[] = { NULL, "С-50",		"С-70",		 "АС-50/8",	  "АС-50/8",	"АС-70/11",	 "АС-70/11",  "АЖС-70/39", "АС-95/16",	 "АС-120/19", "АС-120/27, АС-70/72", 
										  "АС-150/19", "АС-150/19", "АС-150/24", "АС-150/24", "АС-150/34", "АС-150/34", "АС-185/29", "АС-185/24", "АС-185/43", "АС-185/43"};
	static char * D1  [] = { NULL, "16.9", "16.6", "16.6", "16.6", "17.0", "17.0", "20.9", "21.1", "21.6", "21.8, 21.8",
			 							  "24.4", "24.4", "24.7", "24.7", "24.5", "24.5", "24.5", "24.4", "24.9", "24.9"};
	static double L1  [] = { 0., 1700., 1700., 1400., 1400., 1600., 1600., 1800., 1800., 1900., 1900., 
										  2000., 2000., 2000., 2000., 2000., 2000., 2000., 2000., 2000., 2000.};
	static double L2  [] = { 0., 1300., 1300.,  800.,  800.,  800.,  800., 1300., 1300., 1300., 1300., 
										  1300., 1300., 1300., 1300., 1300., 1300., 1300., 1300., 1300., 1300.};
	static double L3  [] = { 0., 1300., 1300.,  800.,  800.,  800.,  800., 1300., 1300., 1300., 1300., 
										  1300., 1300., 1300., 1300., 1300., 1300., 1300., 1300., 1300., 1300.};
	static double mass[] = { 0., 2.84, 2.50, 2.11, 1.49, 2.17, 1.46, 3.55, 2.18, 3.42, 2.16, 
										  4.21, 2.46, 4.21, 2.46, 3.97, 2.40, 3.82, 2.32, 3.58, 2.24};
/////////////////////////////////////////////////////////////////////
//...заполнить данные по структуре зажима (из технологической карты);
	static int    N_pr    [] = { 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				 								0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
	static double diam    [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT};
	static double alpha   [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
				 								MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT};
	static double E_module[] = { 0., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 
												200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000.};
	static double nju     [] = { 0., 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 											
												0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29};
	static double A_temp  [] = { 0., 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 
												1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5};
//...заполнить данные по структуре зажима (из технологической карты);
/////////////////////////////////////////////////////////////////////
	static double D   [] = { 0., 17.5, 17.5, 17.5, 17.5, 17.5, 17.5, 23.0, 23.0, 23.0, 23.0, 
			 							  25.5, 25.5, 25.5, 25.5, 25.5, 25.5, 25.5, 25.5, 25.5, 25.5};
	static double B   [] = { 0., 18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 18.5, 
			 							  20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0};
	static double H   [] = { 0., 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 55.0, 55.0, 55.0, 55.0, 
			 							  55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0};
	static double H1  [] = { 0., 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 91.0, 91.0, 91.0, 91.0, 
			 							  91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0};
	static char * S0[] = { "9,1П-01",  "11,0П-01", "9,6П-01",  "9,6П-11",  "11,4П-01", "11,4П-11", "13,5П-01", "13,5П-11", "15,4П-01", "15,4П-11", 
								  "16,8П-01", "16,8П-11", "17,1П-01", "17,1П-11", "17,5П-01", "17,5П-11", "18,9П-01", "18,9П-11", "19,6П-01", "19,6П-11" };

	Shablon  records[] = {	{			  CHAR_TYPE_RECORD, "Марка провода или троса"}, //(0) -- WireMark
									{  DLENGTH_CHAR_TYPE_RECORD, "Диаметр протектора"},		//(1) -- D1
									{		  DLENGTH_TYPE_RECORD, "Длина протектора"},			//(2) -- L1
									{		  DLENGTH_TYPE_RECORD, "Длина силовой пряди 1"},	//(3) -- L2
									{		  DLENGTH_TYPE_RECORD, "Длина силовой пряди 2"},	//(4) -- L3
									{			 DMASS_TYPE_RECORD, "Масса зажима"},				//(5) -- mass
									{				INT_TYPE_RECORD, "Число проволок"},				//(6) -- N_pr
									{		  DLENGTH_TYPE_RECORD, "Диаметр проволоки"},			//(7) -- diam																
									{			DANGLE_TYPE_RECORD, "Угол наклона"},				//(8) -- alpha
									{		  DSTRESS_TYPE_RECORD, "Модуль упругости"},			//(9) -- E_module
									{			DOUBLE_TYPE_RECORD, "Коэф. Пуассона"},				//(10) -- nju
									{DTEMPER_EXTENT_TYPE_RECORD, "Коэф. темп. расш."},			//(11) -- A_temp
									{		  DLENGTH_TYPE_RECORD, "D"},								//(12) -- D																
									{		  DLENGTH_TYPE_RECORD, "B"},								//(13) -- B																
									{		  DLENGTH_TYPE_RECORD, "H"},								//(14) -- H																
									{		  DLENGTH_TYPE_RECORD, "H1"},								//(15) -- H1																
	};
	Table * table = get_shablon_table(16, 20, records, S0, id_static_char);

	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = Wire;
		table->table[1].parm_values = D1;
		table->table[2].parm_values = L1;
		table->table[3].parm_values = L2;
		table->table[4].parm_values = L1;
		table->table[5].parm_values = mass;
		table->table[6].parm_values = N_pr;
		table->table[7].parm_values = diam;
		table->table[8].parm_values = alpha;
		table->table[9].parm_values = E_module;
		table->table[10].parm_values = nju;
		table->table[11].parm_values = A_temp;
		table->table[12].parm_values = D;
		table->table[13].parm_values = B;
		table->table[14].parm_values = H;
		table->table[15].parm_values = H1;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = Wire[k];
		((char  **)(table->table[1].parm_values))[k] = D1[k];
		((double *)(table->table[2].parm_values))[k] = L1[k];
		((double *)(table->table[3].parm_values))[k] = L2[k];
		((double *)(table->table[4].parm_values))[k] = L3[k];
		((double *)(table->table[5].parm_values))[k] = mass[k];
		((int    *)(table->table[6].parm_values))[k] = N_pr[k];
		((double *)(table->table[7].parm_values))[k] = diam[k];
		((double *)(table->table[8].parm_values))[k] = alpha[k];
		((double *)(table->table[9].parm_values))[k] = E_module[k];
		((double *)(table->table[10].parm_values))[k] = nju[k];
		((double *)(table->table[11].parm_values))[k] = A_temp[k];
		((double *)(table->table[12].parm_values))[k] = D[k];
		((double *)(table->table[13].parm_values))[k] = B[k];
		((double *)(table->table[14].parm_values))[k] = H[k];
		((double *)(table->table[15].parm_values))[k] = H1[k];
	}
	return table;
}

//////////////////////////////////////
//...таблицы для защитных протекторов;
Table * fitting_PZS(int id_static_char)
{
	static char * Section [] = { NULL, "240/32, 240/39", "240/56",   "300/39, 300/48",  "300/67",  "330/30, 330/43", "400/18, 400/22", "400/51", "70/11", "70/39, 95/16", "70/72, 120/19, 120/27", 
												"150/19, 150/24", "150/34", "185/24, 185/29", "185/43, 205/27", "240/32, 240/39", "240/56", "300/39, 300/48", "300/67", "330/30, 330/43", "400/18, 400/22", 
												"400/51", "АС-185/128", "АС-300/204", "АС-500/336, АЖС-500/336", "35/6,2", "50/8", "70/11", "70/39, 95/16", "70/72", "120/19, 120/27", 
												"150/19, 150/24", "150/34", "185/24, 185/29", "185/43, 205/27", "240/32, 240/39", "240/56", "300/39, 300/48", "300/67", "330/30, 330/43", "400/18, 400/22", 
												"400/51", "500", "500", "500", "640", "640", "640"};
	static char * D_sect  [] = { NULL, "21.6, 21.6", "22.4", "24.0, 24.1", "24.5", "24.8, 25.2", "26.0, 26.6", "27.5", "11.4", "13.3, 13.5", "15.4, 15.2, 15.4", 
												"16.8, 17.1", "17.5", "18.9, 18.8", "19.6, 19.8", "21.6, 21.6", "22.4", "24.0, 24.1", "24.5", "24.8, 25.2", "26.0, 26.6", 
												"27.5", "", "", "", "8.4", "9.6", "11.4", "13.3, 13.5", "15.4", "15.2, 15.4", 
												"16.8, 17.1", "17.5", "18.9, 18.8", "19.6, 19.8", "21.6, 21.6", "22.4", "24.0, 24.1", "24.5", "24.8, 25.2", "26.0, 26.6", 
												"27.5", "45.0", "45.0", "45.0", "59.0", "59.0", "59.0" };
	static char * D1      [] = { NULL, "28.0", "28.8", "30.4, 30.5", "30.9", "31.2, 31.6", "31.6, 32.2", "33.1", "17.0", "18.9, 19.1", "21.0, 20.8, 21.0", 
			 								   "24.4, 24.7", "25.1", "24.5, 24.4", "25.2, 25.4", "28.0", "28.8", "30.4, 30.5", "30.9", "31.2, 31.6", "31.6, 32.2", 
			 								   "33.1", "33.1", "39.2", "47.5, 47.5", "14.8", "16.0", "17.8", "19.7, 19.9", "21.8", "21.6, 21.8", 
			 								   "24.4, 24.7", "25.1", "26.5, 26.4", "27.2, 27.4", "29.2, 29.2", "30.0", "31.6, 31.7", "32.1", "32.4, 32.8", "33.6, 34.2", 
			 								   "35.1", "52.6", "54.3", "55.0", "66.6", "68.3", "69.0" };
	static double L1      [] = { 0., 2200., 2200., 2300., 2300., 2300., 2300., 2300.,  500.,  500.,  500., 
											    500.,  500.,  500.,  500.,  500.,  500.,  500.,  500.,  500.,  500., 
											    500., 5400., 5400., 6300., 1700., 1700., 1800., 1800., 2000., 2000., 
											   2000., 2000., 2100., 2100., 2200., 2200., 2300., 2300., 2300., 2300., 
											   2300., 1200., 1200., 1200., 1200., 1200., 1200.};
	static char * D2      [] = { NULL, "", "", "", "", "", "", "", "", "", "", 
											   "", "", "", "", "", "", "", "", "", "", 
											   "", "42.1", "48.2", "56.5, 56.5", "", "", "", "", "", "", 
											   "", "", "", "", "", "", "", "", "", "", 
											   "", "", "", "", "", "", "" };
	static double L2      [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
											   MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
											   MAX_HIT, 4400, 4400, 5300, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
											   MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
											   MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	static double mass    [] = { 0., 3.0, 3.2, 3.6, 3.7, 3.8, 3.5, 3.5, 0.3, 0.4, 0.5, 
											   0.7, 0.7, 0.6, 0.6, 0.7, 0.7, 0.8, 0.9, 0.9, 0.8, 
											   0.8, 18.7, 22.1, 31.6, 1.3, 1.4, 1.5, 1.7, 2.0, 2.0, 
											   2.8, 2.9, 3.2, 3.4, 3.8, 3.8, 4.2, 4.3, 4.5, 4.9, 
											   4.9, 3.8, 5.8, 2.4, 5.0, 4.3, 1.9 };
/////////////////////////////////////////////////////////////////////
//...заполнить данные по структуре зажима (из технологической карты);
	static int    N_pr    [] = { 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				 								0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				 								0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				 								0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
				 								0, 0, 0, 0, 0, 0, 0};
	static double diam    [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
												MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT};
	static double alpha   [] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
				 								MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
				 								MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
				 								MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, 
				 								MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT};
	static double E_module[] = { 0., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 
												200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 
												200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 
												200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 200000., 
												200000., 200000., 200000., 200000., 200000., 200000., 200000.};
	static double nju     [] = { 0., 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 											
												0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 											
												0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 											
												0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 											
												0.29, 0.29, 0.29, 0.29, 0.29, 0.29, 0.29};
	static double A_temp  [] = { 0., 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 
												1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 
												1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 
												1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 
												1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5, 1.2e-5};
//...заполнить данные по структуре зажима (из технологической карты);
/////////////////////////////////////////////////////////////////////
	static char * S0[] = { "21,6-01", "22,4-01", "24,1-01", "24,5-01", "24,8-01", "26,0-01", "27,5-01", "11,4-11", "13,3-11", "15,2-11", 
								  "16,8-11", "17,5-11", "18,8-11", "19,6-11", "21,6-11", "22,4-11", "24,1-11", "24,5-11", "24,8-11", "26,0-11", 
								  "27,5-11", "23,1-21", "29,2-21", "37,5-21",  "8,4-31",  "9,6-31", "11,4-31", "13,3-31", "15,4-31", "15,2-31", 
								  "16,8-31", "17,5-31", "18,8-31", "19,6-31", "21,6-31", "22,4-31", "24,1-31", "24,5-31", "24,8-31", "26,0-31", 
								  "27,5-31", "45,0-41", "45,0-42", "45,0-43", "59,0-41", "59,0-42", "59,0-43" };

	Shablon  records[] = {	{			  CHAR_TYPE_RECORD, "Сечение или марка провода"}, //(0) -- Ыусешщт
									{  DLENGTH_CHAR_TYPE_RECORD, "Диаметр сечения"},			  //(1) -- D_sect
									{	DLENGTH_CHAR_TYPE_RECORD, "Диаметр первого слоя"},		  //(2) -- D1
									{		  DLENGTH_TYPE_RECORD, "Длина первого слоя"},		  //(3) -- L1
									{	DLENGTH_CHAR_TYPE_RECORD, "Диаметр второго слоя"},		  //(4) -- D2
									{		  DLENGTH_TYPE_RECORD, "Длина второго слоя"},		  //(5) -- L2
									{		    DMASS_TYPE_RECORD, "Масса зажима"},				  //(6) -- mass
									{				INT_TYPE_RECORD, "Число проволок"},				  //(7) -- N_pr
									{		  DLENGTH_TYPE_RECORD, "Диаметр проволоки"},			  //(8) -- diam																
									{			DANGLE_TYPE_RECORD, "Угол наклона"},				  //(9) -- alpha
									{		  DSTRESS_TYPE_RECORD, "Модуль упругости"},			  //(10) -- E_module
									{			DOUBLE_TYPE_RECORD, "Коэф. Пуассона"},				  //(11) -- nju
									{DTEMPER_EXTENT_TYPE_RECORD, "Коэф. темп. расш."},			  //(12) -- A_temp
	};
	Table * table = get_shablon_table(13, 47, records, S0, id_static_char);

	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = Section;
		table->table[1].parm_values = D_sect;
		table->table[2].parm_values = D1;
		table->table[3].parm_values = L1;
		table->table[4].parm_values = D2;
		table->table[5].parm_values = L2;
		table->table[6].parm_values = mass;
		table->table[7].parm_values = N_pr;
		table->table[8].parm_values = diam;
		table->table[9].parm_values = alpha;
		table->table[10].parm_values = E_module;
		table->table[11].parm_values = nju;
		table->table[12].parm_values = A_temp;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = Section[k];
		((char  **)(table->table[1].parm_values))[k] = D_sect[k];
		((char  **)(table->table[2].parm_values))[k] = D1[k];
		((double *)(table->table[3].parm_values))[k] = L1[k];
		((char  **)(table->table[4].parm_values))[k] = D2[k];
		((double *)(table->table[5].parm_values))[k] = L2[k];
		((double *)(table->table[6].parm_values))[k] = mass[k];
		((int    *)(table->table[7].parm_values))[k] = N_pr[k];
		((double *)(table->table[8].parm_values))[k] = diam[k];
		((double *)(table->table[9].parm_values))[k] = alpha[k];
		((double *)(table->table[10].parm_values))[k] = E_module[k];
		((double *)(table->table[11].parm_values))[k] = nju[k];
		((double *)(table->table[12].parm_values))[k] = A_temp[k];
	}
	return table;
}

////////////////////////////////////
//...таблицы для гасителей вибрации;
Table * fitting_GV(int id_static_char)
{
	static double mass[] = { 0., 1.70,1.75,1.80,2.10,2.15,2.20,2.10,2.15,2.20,2.30,
										  2.35,2.40,2.30,2.35,2.40,2.30,2.35,2.40,2.60,2.65,
										  2.70,2.60,2.65,2.70,2.60,2.65,2.70,2.60,2.65,2.70,
										  4.20,4.25,4.30,4.40,4.50,4.20,4.25,4.30,4.40,4.50,
										  4.20,4.25,4.30,4.40,4.50,4.20,4.25,4.30,4.40,4.50,
										  4.20,4.25,4.30,4.40,4.50,4.20,4.25,4.30,4.40,4.50,
										  4.20,4.25,4.30,4.40,4.50,4.20,4.25,4.30,4.40,4.50,
										  4.20,4.25,4.30,4.40,4.50,5.85,5.90,5.95,6.00,6.10,
										  5.85,5.90,5.95,6.00,6.10,5.85,5.90,5.95,6.00,6.10,
										  5.85,5.90,5.95,6.00,6.10,6.00,6.05,6.10,6.15,6.20,
										  6.00,6.05,6.10,6.15,6.20,6.00,6.05,6.10,6.15,6.20,
										  6.00,6.05,6.10,6.15,6.20,7.65,7.70,7.75,7.80,7.85,
										  7.65,7.70,7.75,7.80,7.85,7.65,7.70,7.75,7.80,7.85,
										  7.65,7.70,7.75,7.80,7.85,7.65,7.70,7.75,7.80,7.85,
										  9.30,9.35,9.40,9.30,9.35,9.40,9.30,9.35,9.40,9.30,
										  9.35,9.40 };
	static double bob_mass[] =  { 0., 0.4,0.4,0.4,0.6,0.6,0.6,0.6,0.6,0.6,0.6,
												 0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.8,0.8,
												 0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,0.8,
												 1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,
												 1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,
												 1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,
												 1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,1.6,
												 1.6,1.6,1.6,1.6,1.6,2.4,2.4,2.4,2.4,2.4,
												 2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,
												 2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,
												 2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,2.4,
												 2.4,2.4,2.4,2.4,2.4,3.2,3.2,3.2,3.2,3.2,
												 3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,
												 3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,3.2,
												 4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,
												 4.0,4.0 };
	static double bob_cable[] = { 0., 250,300,350,250,300,350,250,300,350,300,
												 350,400,300,350,400,300,350,400,300,350,
												 400,300,350,400,300,350,400,300,350,400,
												 350,400,450,500,550,350,400,450,500,550,
												 350,400,450,500,550,350,400,450,500,550,
												 350,400,450,500,550,350,400,450,500,550,
												 350,400,450,500,550,350,400,450,500,550,
												 350,400,450,500,550,400,450,500,550,600,
												 400,450,500,550,600,400,450,500,550,600,
												 400,450,500,550,600,400,450,500,550,600,
												 400,450,500,550,600,400,450,500,550,600,
												 400,450,500,550,600,450,500,550,600,650,
												 450,500,550,600,650,450,500,550,600,650,
												 450,500,550,600,650,450,500,550,600,650,
												 500,550,600,500,550,600,500,550,600,500,
												 550,600 };
	static double diam_cable[] = { 0., 8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,9.1,
												  9.1,9.1,9.1,9.1,9.1,9.1,9.1,9.1,9.1,9.1,
												  9.1,9.1,9.1,9.1,9.1,9.1,9.1,9.1,9.1,9.1,
												  11.,11.,11.,11.,11.,11.,11.,11.,11.,11.,
												  11.,11.,11.,11.,11.,11.,11.,11.,11.,11.,
												  11.,11.,11.,11.,11.,13.,13.,13.,13.,13.,
												  13.,13.,13.,13.,13.,13.,13.,13.,13.,13.,
												  13.,13.,13.,13.,13.,11.,11.,11.,11.,11.,
												  11.,11.,11.,11.,11.,11.,11.,11.,11.,11.,
												  11.,11.,11.,11.,11.,13.,13.,13.,13.,13.,
												  13.,13.,13.,13.,13.,13.,13.,13.,13.,13.,
												  13.,13.,13.,13.,13.,13.,13.,13.,13.,13.,
												  13.,13.,13.,13.,13.,13.,13.,13.,13.,13.,
												  13.,13.,13.,13.,13.,13.,13.,13.,13.,13.,
												  13.,13.,13.,13.,13.,13.,13.,13.,13.,13.,
												  13.,13. };
	static char * diam_wire[] = {NULL, "15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","19.8 – 29.2","19.8 – 29.2","19.8 – 29.2","9.0 – 13.5", 
												"9.0 – 13.5", "9.0 – 13.5", "11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","9.0 – 13.5", "9.0 – 13.5", 
												"9.0 – 13.5", "11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","19.8 – 29.2","19.8 – 29.2","19.8 – 29.2",
												"9.0 – 13.5", "9.0 – 13.5", "9.0 – 13.5", "9.0 – 13.5", "9.0 – 13.5", "11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5",
												"15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0",
												"29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5",
												"15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0",
												"29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5",
												"15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0",
												"29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5",
												"15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0",
												"29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","11.4 – 17.5",
												"15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0","22.0 – 29.0",
												"29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","29.0 – 38.0","30.0 – 42.5","30.0 – 42.5","30.0 – 42.5","30.0 – 42.5","30.0 – 42.5",
												"9.0 – 13.5", "9.0 – 13.5", "9.0 – 13.5", "11.4 – 17.5","11.4 – 17.5","11.4 – 17.5","15.2 – 22.5","15.2 – 22.5","15.2 – 22.5","30.0 – 42.5",
												"30.0 – 42.5","30.0 – 42.5"};
	static char * S0 [] = { "1113-02","1213-02","1313-02","2113-02","2213-02","2313-02","2114-02","2214-02","2313-02","2221-02",
									"2321-02","2421-02","2222-02","2322-02","2422-02","2223-02","2323-02","2423-02","3221-02","3321-02",
									"3421-02","3222-02","3322-02","3422-02","3223-02","3323-02","3423-02","3224-02","3324-02","3424-02",
									"4331-02","4431-02","4531-02","4631-02","4731-02","4332-02","4432-02","4532-02","4632-02","4732-02",
									"4333-02","4433-02","4533-02","4633-02","4733-02","4334-02М","4434-02М","4534-02М","4634-02М","4734-02М",
									"4335-02М","4435-02М","4535-02М","4635-02М","4735-02М","4342-02","4442-02","4542-02","4642-02","4742-02",
									"4343-02","4443-02","4543-02","4643-02","4743-02","4344-02М","4444-02М","4544-02М","4644-02М","4744-02М",
									"4345-02М","4445-02М","4545-02М","4645-02М","4745-02М","5432-02","5532-02","5632-02","5732-02","5832-02",
									"5433-02","5533-02","5633-02","5733-02","5833-02","5434-02М","5534-02М","5634-02М","5734-02М","5834-02М",
									"5435-02М","5535-02М","5635-02М","5735-02М","5835-02М","5442-02","5542-02","5642-02","5742-02","5842-02",
									"5443-02","5543-02","5643-02","5743-02","5843-02","5444-02М","5544-02М","5644-02М","5744-02М","5844-02М",
									"5445-02М","5545-02М","5645-02М","5745-02М","5845-02М","6542-02","6642-02","6742-02","6842-02","6942-02",
									"6543-02","6643-02","6743-02","6843-02","6943-02","6544-02М","6644-02М","6744-02М","6844-02М","6944-02М",
									"6545-02М","6645-02М","6745-02М","6845-02М","6945-02М","6546-02","6646-02","6746-02","6846-02","6946-02",
									"7643-02","7743-02","7843-02","7644-02М","7744-02М","7844-02М","7645-02М","7745-02М","7845-02М","7646-02",
									"7746-02","7846-02" };

	Shablon  records[] = {	{  DMASS_TYPE_RECORD, "Масса"},                          //(0) -- mass
									{  DMASS_TYPE_RECORD, "Масса груза"},                    //(1) -- bob_mass
									{DLENGTH_TYPE_RECORD, "Длина тросика"},			         //(2) -- bob_cable
									{DLENGTH_TYPE_RECORD, "Диаметр тросика"},			         //(3) -- diam_cable
									{   CHAR_TYPE_RECORD, "Диаметр зажимаемого сердечника"}, //(4) -- diam_wire
	};
	Table * table = get_shablon_table(5, 152, records, S0, id_static_char);

	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = mass;
		table->table[1].parm_values = bob_mass;
		table->table[2].parm_values = bob_cable;
		table->table[3].parm_values = diam_cable;
		table->table[4].parm_values = diam_wire;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((double *)(table->table[0].parm_values))[k] = mass[k];
		((double *)(table->table[1].parm_values))[k] = bob_mass[k];
		((double *)(table->table[2].parm_values))[k] = bob_cable[k];
		((double *)(table->table[3].parm_values))[k] = diam_cable[k];
		((char  **)(table->table[4].parm_values))[k] = diam_wire[k];
	}
	return table;
}

///////////////////////////////////////////////////////////////////////////////////
//...функция образования контекста для базы данных защитного оборудования проводов;
void * CreateFITTINGContext(int N_sm)
{
	if (N_sm < 0 || N_sm >= NUM_FITTING_SAMPLES) N_sm = 0;

	Context * cont = (Context *)new_struct(sizeof(Context));
	if (! cont) return(NULL);

	cont->N           = N_sm+SHIFT_FITTING_SAMPLES;
	cont->static_char = SPECIAL_STATE;
	cont->sample_name = GetFITTINGSampleName(N_sm);
	cont->GOST_name   = GetFITTINGGOSTName  (N_sm);
	cont->units       = UNIT_WIRE;

	switch (cont->N-SHIFT_FITTING_SAMPLES) {
		case _FITTING1: cont->table = fitting_NS (cont->static_char); break; //НС-;
      case _FITTING2: cont->table = fitting_PS (cont->static_char); break; //ПС-;
      case _FITTING3: cont->table = fitting_PZS(cont->static_char); break; //ПЗС-;
      case _FITTING4: cont->table = fitting_GV (cont->static_char); break; //ГВ-;
  }
  set_default    (cont);
  set_table_units(cont->table, UNIT_WIRE);
  
  SetTableIndex(cont, 1);
  SetUnits     (cont, UNIT_WIRE); return (void *)cont;
}

/*
/*===============================================================================================*/
/*                                 ИНИЦИАЛИЗАЦИЯ ОБРАЗЦА                                         */
/*===============================================================================================*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//...пpедваpительная инициализация образцов для базы данных арматуры (включая редуцированную базу данных проводов);
#ifndef ___ABRIDGE_PROFILE_MODE___
int fitting_init(void * context, CGrid * block_nd)
{
  Context * cont = (Context *)context;

  if (! is_Fitting(cont)  || ! cont->table) return(0);

  cont->left = cont->right = cont->bottom = cont->top = cont->back = cont->front = 0.;

  DeleteSample(cont->sm);

  switch (cont->N-SHIFT_FITTING_SAMPLES) {
     case _FITTING1:
     case _FITTING2:
     case _FITTING3:
     case _FITTING4: return 1;
  }
  return(cont->sm != NULL);
}
#endif

#endif
#undef  Message
