#include "stdafx.h"

#include "cpro_lpr.h"
#include "cpro_wire.h"

#ifndef ___ABRIDGE_PROFILE_MODE___
#include "cwire2d.h"
#include "CCells.h"
#endif
#include "unit_mes.h"

#ifdef ___WINDOWS_LOG_MESSAGE___
#define  Message(Msg)    theMainFrame->Message(Msg)
#else
#define  Message(Msg)    printf(Msg);  printf("\n")
#endif

#ifdef ___PRO_WIRE2D_cpp___
/////////////////////////////////////
//...˜ËÒÎÓ ÚËÔÓ‚ ÔÓ‚Ó‰Ó‚ Ë Ëı ËÏÂÌ‡;
int    GetWIRESampleCount(void) { return(NUM_WIRE_SAMPLES); }
char * GetWIRESampleName (int N_sm)
{
  static char * S[] = { "Ã",    //_WIRE1                           
                        "¿",    //_WIRE2      
                        "¿ œ",  //_WIRE3
                        "¿—",   //_WIRE4
                        "¿— —", //_WIRE5
                        "¿— œ", //_WIRE6
                        "¿— ",  //_WIRE7
                        "¿Õ",   //_WIRE8
                        "¿Õ œ", //_WIRE9
                        "¿∆",   //_WIRE10
                        "¿∆ œ", //_WIRE11
                        "¿∆—",  //_WIRE12
                        "—",    //_WIRE13
/////////////////
//...ÒÚ‡˚È √Œ—“;
                        "¿—",   //_WIRE14
                        "¿— ",  //_WIRE15
                        "¿—”",  //_WIRE16
                        "¿—Œ",  //_WIRE17
  };
  return S[N_sm];
}
char * GetWIREGOSTName (int N_sm)
{
  static char * S[] = { "√Œ—“ 839-80", //_WIRE1                           
                        "√Œ—“ 839-80", //_WIRE2      
                        "√Œ—“ 839-80", //_WIRE3
                        "√Œ—“ 839-80", //_WIRE4
                        "√Œ—“ 839-80", //_WIRE5
                        "√Œ—“ 839-80", //_WIRE6
                        "√Œ—“ 839-80", //_WIRE7
                        "√Œ—“ 839-80", //_WIRE8
                        "√Œ—“ 839-80", //_WIRE9
                        "√Œ—“ 839-80", //_WIRE10
                        "√Œ—“ 839-80", //_WIRE11
                        "√Œ—“ 839-80", //_WIRE12
                        "√Œ—“ 3063-80,(19),“ ",//_WIRE13
/////////////////
//...ÒÚ‡˚È √Œ—“;
                        "√Œ—“ 839-59",      //_WIRE14
                        "Ã–“” 2-017-20-63", //_WIRE15
                        "Ã–“” 2-017-20-63", //_WIRE16
                        "Ã–“” 2-017-20-63", //_WIRE17
  };
  return S[N_sm];
}

///////////////////////////////////////////////////
//...˜ËÒÎÓ ÚËÔÓ‚ Á‡˘ËÚÌÓ„Ó Ó·ÓÛ‰Ó‚‡ÌËˇ Ë Ëı ËÏÂÌ‡;
int    GetREDUCEDWIRESampleCount(void) { return(NUM_REDUCEDWIRE_SAMPLES); }
char * GetREDUCEDWIRESampleName (int N_sm)
{
  static char * S[] = { "¿—",  //_REDUCEDWIRE1
                        "¿∆—", //_REDUCEDWIRE2
                        "—",   //_REDUCEDWIRE3
                        "¿",   //_REDUCEDWIRE4
                        "¿Õ",  //_REDUCEDWIRE5
                        "¿∆"   //_REDUCEDWIRE6
  };
  return S[N_sm];
}
char * GetREDUCEDWIREGOSTName (int N_sm)
{
  static char * S[] = { "√Œ—“ 839-80",				//_REDUCEDWIRE1
                        "√Œ—“ 839-80",				//_REDUCEDWIRE2
                        "√Œ—“ 3063-80,(19),“ ", //_REDUCEDWIRE3
                        "√Œ—“ 839-80",          //_REDUCEDWIRE4
                        "√Œ—“ 839-80",				//_REDUCEDWIRE5
                        "√Œ—“ 839-80"				//_REDUCEDWIRE6
  };
  return S[N_sm];
}

/*=============================================================*/
/*                 “¿¡À»÷€ —≈◊≈Õ»… œ–Œ¬ŒƒŒ¬                    */
/*=============================================================*/
//////////////////////////////////////////////////
//...Ú‡·ÎËˆ˚ ‰Îˇ Ó‰ÌÓÓ‰Ì˚ı ÔÓ Ï‡ÚÂË‡ÎÛ ÔÓ‚Ó‰Ó‚;
Table * wire_uniform_A(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "1", "1", "1", "7", "7", "7", "7", "7, 12", "7, 12", "7, 12", 
												"7, 12", "7, 12, 18", "7, 12, 18", "7, 12, 18", "7, 12, 18", "7, 12, 18" };
	static char * diameter[] = { NULL, "2.24", "2.76", "3.57", "1.70, 1.70", "2.13, 2.13", "2.51, 2.51", "3.00, 3.00", "2.13, 2.13, 2.13", "2.51, 2.51, 2.51", "2.80, 2.80, 2.80", 
												"3.15, 3.15, 3.15", "2.51, 2.51, 2.51, 2.51", "2.84, 2.84, 2.84, 2.84", "3.15, 3.15, 3.15, 3.15", "3.45, 3.45, 3.45, 3.45", "3.66, 3.66, 3.66, 3.66" };
	static char * N_layer[]  = { NULL, "0", "0", "0", "1", "1", "1", "1", "2", "2", "2", 
												"2", "3", "3", "3", "3", "3" };
	static char * H_twist[]  = { NULL, "0", "0", "0", "15", "15", "15", "15", "14, 13", "14, 13", "14, 13", 
												"14, 13", "14, 13, 12", "14, 13, 12", "14, 13, 12", "14, 13, 12", "14, 13, 12"};
	static double M_wire[]   = { 0., 35., 52., 88., 142., 224., 311., 444., 612., 850., 1058., 
												1338.,  1659., 2124., 2614., 3071., 3528.};
	static double M_lube[]   = { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
												0., 0., 0., 0., 0., 0.};
	static double F_break[]  = { 0., 1661., 2467., 3881., 6031., 9463., 13141., 17455., 27115., 37637., 46845., 
												55151., 73303., 93837., 107422., 128827., 144988. };
	static char * E_module[] = { NULL, "130000", "130000", "130000", "130000", "130000", "130000", "130000", "130000", "130000", "130000", 
												"130000", "130000", "130000", "130000", "130000", "130000" };
	static char * nju[]      = { NULL, "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", 
												"0.34", "0.34", "0.34", "0.34", "0.34", "0.34" };
	static char * At[]       = { NULL, "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", 
												"1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5", "1.7e-5" };
	static char * S0[] = { "4", "6", "10", "16", "25", "35", "50", "70", "95", "120", 
								  "150", "185", "240", "300", "350", "400"};
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 16 ? reduced[0] : 16, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
												 NULL, NULL, NULL, NULL, NULL, NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_uniform_B(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "7", "7", "7", "7", "7", "7", "7", "7", "7", "7, 12", 
												"7, 12", "7, 12", "7, 12", "7, 12", "7, 12", "7, 12", "7, 12", "7, 12", "7, 12, 18", "7, 12, 18", 
												"7, 12, 18", "7, 12, 18", "7, 12, 18", "7, 12, 18", "7, 12, 18, 24", "7, 12, 18", "7, 12, 18, 24", "7, 12, 18, 24", "7, 12, 18, 24", "7, 12, 18, 24", 
												"7, 12, 18, 24", "7, 12, 18, 24", "7, 12, 18, 24", "7, 12, 18, 24", "7, 12, 18, 24", "7, 12, 18, 24, 30", "7, 12, 18, 24, 30", "7, 12, 18, 24, 30", "7, 12, 18, 24, 30" };
	static char * diameter[] = { NULL, "1.35, 1.35", "1.70, 1.70", "2.13, 2.13", "2.50, 2.50", "2.70, 2.70", "3.00, 3.00", "3.39, 3.39", "3.55, 3.55", "4.10, 4.10", "2.59, 2.59, 2.59", 
												"2.80, 2.80, 2.80", "2.89, 2.89, 2.89", "3.15, 3.15, 3.15", "3.27, 3.27, 3.27", "3.50, 3.50, 3.50", "3.66, 3.66, 3.66", "4.00, 4.00, 4.00", "4.09, 4.09, 4.09", "3.15, 3.15, 3.15, 3.15", "3.29, 3.29, 3.29, 3.29", 
												"3.45, 3.45, 3.45, 3.45", "3.66, 3.66, 3.66, 3.66", "3.90, 3.90, 3.90, 3.90", "4.15, 4.15, 4.15, 4.15", "3.37, 3.37, 3.37, 3.37, 3.37", "4.39, 4.39, 4.39, 4.39", "3.50, 3.50, 3.50, 3.50, 3.50", "3.63, 3.63, 3.63, 3.63, 3.63", "3.66, 3.66, 3.66, 3.66, 3.66", "3.80, 3.80, 3.80, 3.80, 3.80", 
												"3.85, 3.85, 3.85, 3.85, 3.85", "3.95, 3.95, 3.95, 3.95, 3.95", "4.10, 4.10, 4.10, 4.10, 4.10", "4.33, 4.33, 4.33, 4.33, 4.33", "4.57, 4.57, 4.57, 4.57, 4.57", "3.96, 3.96, 3.96, 3.96, 3.96, 3.96", "4.18, 4.18, 4.18, 4.18, 4.18, 4.18", "4.43, 4.43, 4.43, 4.43, 4.43, 4.43", "4.59, 4.59, 4.59, 4.59, 4.59, 4.59" };
	static char * N_layer[]  = { NULL, "1", "1", "1", "1", "1", "1", "1", "1", "1", "2", 
												"2", "2", "2", "2", "2", "2", "2", "2", "3", "3", 
												"3", "3", "3", "3", "4", "3", "4", "4", "4", "4", 
												"4", "4", "4", "4", "4", "5", "5", "5", "5" };
	static char * H_twist[]  = { NULL, "15", "15", "15", "15", "15", "15", "15", "15", "15", "14, 13", 
												"14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13, 12", "14, 13, 12", 
												"14, 13, 12", "14, 13, 12", "14, 13, 12", "14, 13, 12", "14, 13, 12, 11", "14, 13, 12", "14, 13, 12, 11", "14, 13, 12, 11", "14, 13, 12, 11", "14, 13, 12, 11", 
												"14, 13, 12, 11", "14, 13, 12, 11", "14, 13, 12, 11", "14, 13, 12, 11", "14, 13, 12, 11", "14, 13, 12, 11, 10", "14, 13, 12, 11, 10", "14, 13, 12, 11, 10", "14, 13, 12, 11, 10" };
	static double M_wire[]   = { 0., 27.4, 43., 68., 94., 109.4, 135., 172.3, 189., 252., 274.9, 
												321., 443.6, 406., 439.8, 502., 549.7, 655., 687.1, 794., 867.5, 
												952., 1072., 1206., 1378., 1500., 1542.2, 1618., 1738.4, 1771., 1902., 
												1959.2, 2062., 2020., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	static double M_lube[]   = { 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0 };
	static double F_break[]  = { 0., 1950., 3021., 4500., 5913., 6800., 8198., 10390., 11288., 14784., 17000., 
												19890., 21250., 24420., 26400., 29832., 32000., 38192., 40000., 47569., 51970., 
												57057., 63420., 71856., 80000., 89760., 89600., 95632., 100800., 104575., 112725., 
												113600., 119584., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	static char * E_module[] = { NULL, "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", 
												"63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", 
												"63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", 
												"63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000", "63000" };
	static char * nju[]      = { NULL, "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", 
												"0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", 
												"0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", 
												"0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34" };
	static char * At[]       = { NULL, "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", 
												"2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", 
												"2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", 
												"2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5" };
	static char * S0[] = { "10",  "16",  "25",  "35",  "40",  "50",  "63",  "70",  "95",  "100", 
								  "120", "125", "150", "160", "185", "200", "240", "250", "300", "315", 
								  "350", "400", "450", "500", "550", "560", "600", "630", "650", "700", 
								  "710", "750", "800", "900", "1000", "1120", "1250", "1400", "1500" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 39 ? reduced[0] : 39, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_uniform_C(int id_static_char, int * reduced = NULL)
{
	static double M_lube[] = { 0., MAX_HIT, 0.5, 0.5, 0.5, MAX_HIT, 0.5, MAX_HIT, 1., 1., MAX_HIT, 
											16., MAX_HIT, 20., MAX_HIT, 25., MAX_HIT, 33., MAX_HIT, 54., MAX_HIT, 
											65., 73., 84., 94., 117., MAX_HIT, 126., MAX_HIT, 138., 149., 
											MAX_HIT, 161., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	Table * table = wire_uniform_B(id_static_char, reduced);
	if (id_static_char == SPECIAL_STATE)
		table->table[5].parm_values = M_lube;
	else if (reduced)
	for (int k = 1; k <= reduced[0]; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
	else
	for (int k = 1; k <= table->N_group; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[k];

	return table;
}
  
/////////////////////////////////////////////////////////
//...Ú‡·ÎËˆ˚ ‰Îˇ ÒÂ˜ÂÌËˇ ÒÓÒÚ‡‚Ì˚ı ÔÓ Ï‡ÚÂË‡ÎÛ ÔÓ‚Ó‰Ó‚;
Table * wire_compose_A(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "1, 6", "1, 6", "1, 6", "1, 6", "1, 6", "1, 6", "1, 6", "1, 6", "7, 12, 18", "1, 6", 
												"7, 12, 18, 24", "1, 6", "7, 10, 16", "7, 12, 18", "1, 6, 12", "7, 10, 16", "7, 9, 15", "7, 10, 16", "7, 12, 18", "1, 6, 12",
												"7, 10, 16", "7, 9, 15", "7, 10, 16", "7, 12, 18", "7, 12, 18, 24, 30", "1, 6, 12", "7, 10, 16", "7, 9, 15", "7, 9, 15", "7, 10, 16",
												"7, 12, 18", "7, 9, 15", "7, 10, 16", "7, 12, 12, 18", "7, 12, 18", "7, 12, 18, 24, 30", "7, 9, 15, 21", "7, 10, 16", "7, 10, 16, 22", "7, 12, 18, 24",
												"7, 9, 15, 21", "7, 12, 18, 24", "7, 8, 14, 20", "7, 10, 16, 22, 28", "7, 12, 18, 24", "7, 10, 16", "7, 12, 12, 18", "7, 9, 15, 21", "7, 12, 18, 24", "7, 12, 18, 24",
												"7, 9, 15, 21", "7, 12, 18, 24", "7, 8, 14, 20", "7, 10, 16, 22, 28", "7, 12, 18, 24", "7, 12, 18, 24, 30, 36", "7, 12, 18, 24, 24, 30", "7, 12, 18, 24", "7, 9, 15, 21", "7, 12, 12, 18, 24", 
												"7, 12, 12, 18, 24", "7, 9, 15, 21", "7, 12, 12, 18, 24", "7, 12, 15, 21, 27, 33", "7, 12, 15, 21, 27, 33", "7, 9, 15, 21", "7, 12, 12, 18, 24", "7, 12, 15, 21, 27, 33", "7, 9, 15, 21, 27", "7, 12, 18, 24, 30", 
												"7, 12, 12, 18, 24", "7, 12, 15, 21, 27, 33", "7, 9, 15, 21, 27", "7, 12, 18, 24, 30", "7, 9, 15, 21, 27", "7, 10, 16, 22, 28", "7, 12, 9, 15, 21, 27", "7, 12, 12, 18, 24, 30", "7, 12, 9, 15, 21, 27", "7, 12, 12, 18, 24, 30" };
	static char * diameter[] = { NULL, "1.50, 1.50", "1.85, 1.85", "2.30, 2.30", "2.80, 2.80", "2.91, 2.91", "3.20, 3.20", "3.66, 3.66", "3.80, 3.80", "2.20, 2.20, 2.20, 2.20", "4.50, 4.50", 
												"2.20, 2.20, 2.20, 2.20, 2.20", "4.61, 4.61", "1.85, 1.85, 2.40, 2.40", "2.20, 2.20, 2.20, 2.20", "2.97, 2.97, 2.97", "1.92, 1.92, 2.47, 2.47", "1.85, 1.85, 2.80, 2.80", "2.10, 2.10, 2.70, 2.70", "2.50, 2.50, 2.50, 2.50", "3.36, 3.36, 3.36", 
												"2.18, 2.18, 2.80, 2.80", "2.10, 2.10, 3.15, 3.15", "2.30, 2.30, 2.98, 2.98", "2.80, 2.80, 2.80, 2.80", "2.10, 2.10, 2.10, 2.10, 2.10, 2.10", "3.76, 3.76, 3.76", "2.43, 2.43, 3.13, 3.13", "2.20, 2.20, 3.30, 3.30", "2.40, 2.40, 3.60, 3.60", "2.65, 2.65, 3.40, 3.40", 
												"3.20, 3.20, 3.20, 3.20", "2.65, 2.65, 4.00, 4.00", "2.95, 2.95, 3.80, 3.80", "2.10, 2.10, 2.10, 3.50, 3.50", "3.50, 3.50, 3.50, 3.50", "2.65, 2.65, 2.65, 2.65, 2.65, 2.65", "1.99, 1.99, 2.99, 2.99, 2.99", "3.05, 3.05, 3.93, 3.93", "2.30, 2.30, 2.98, 2.98, 2.98", "2.80, 2.80, 2.80, 2.80, 2.80", 
												"2.24, 2.24, 3.36, 3.36, 3.36", "3.07, 3.07, 3.07, 3.07, 3.07", "1.85, 1.85, 3.40, 3.40, 3.40", "2.00, 2.00, 2.57, 2.57, 2.57, 2.57", "3.05, 3.05, 3.05, 3.05, 3.05", "3.40, 3.40, 4.37, 4.37", "2.50, 2.50, 2.50, 4.15, 4.15", "2.38, 2.38, 3.57, 3.57, 3.57", "3.26, 3.26, 3.26, 3.26, 3.26", "3.20, 3.20, 3.20, 3.20, 3.20", 
												"2.51, 2.51, 3.76, 3.76, 3.76", "3.43, 3.43, 3.43, 3.43, 3.43", "2.20, 2.20, 3.90, 3.90, 3.90", "2.20, 2.20, 2.84, 2.84, 2.84, 2.84", "3.40, 3.40, 3.40, 3.40, 3.40", "2.65, 2.65, 2.65, 2.65, 2.65, 2.65, 2.65", "2.65, 2.65, 2.65, 2.65, 2.65, 3.40, 3.40", "3.60, 3.60, 3.60, 3.60, 3.60", "2.65, 2.65, 3.98, 3.98, 3.98", "2.18, 2.18, 2.18, 3.63, 3.63, 3.63", 
												"2.20, 2.20, 2.20, 3.70, 3.70, 3.70", "2.81, 2.81, 4.22, 4.22, 4.22", "2.31, 2.31, 2.31, 3.85, 3.85, 3.85", "2.30, 2.30, 2.30, 2.90, 2.90, 2.90, 2.90", "2.40, 2.40, 2.40, 3.02, 3.02, 3.02, 3.02", "2.99, 2.99, 4.48, 4.48, 4.48", "2.45, 2.45, 2.45, 4.09, 4.09, 4.09", "2.50, 2.50, 2.50, 3.15, 3.15, 3.15, 3.15", "2.51, 2.51, 3.76, 3.76, 3.76, 3.76", "3.48, 3.48, 3.48, 3.48, 3.48, 3.48", 
												"2.61, 2.61, 2.61, 4.34, 4.34, 4.34", "2.65, 2.65, 2.65, 3.30, 3.30, 3.30., 3.30", "2.66, 2.66, 3.99, 3.99, 3.99, 3.99", "3.69, 3.69, 3.69, 3.69, 3.69, 3.69", "2.80, 2.80, 4.21, 4.21, 4.21, 4.21", "3.20, 3.20, 4.10, 4.10, 4.10, 4.10", "1.78, 1.78, 1.78, 4.45, 4.45, 4.45, 4.45", "2.47, 2.47, 2.47, 4.12, 4.12, 4.12, 4.12", "1.88, 1.88, 1.88, 4.70, 4.70, 4.70, 4.70", "2.61, 2.61, 2.61, 4.35, 4.35, 4.35, 4.35" };
	static char * N_layer[]  = { NULL, "0, 1", "0, 1", "0, 1", "0, 1", "0, 1", "0, 1", "0, 1", "0, 1", "2, 1", "0, 1", 
												"3, 1", "0, 1", "1, 2", "1, 2", "0, 2", "1, 2", "1, 2", "1, 2", "1, 2", "0, 2", 
												"1, 2", "1, 2", "1, 2", "1, 2", "3, 2", "0, 2", "1, 2", "1, 2", "1, 2", "1, 2", 
												"1, 2", "1, 2", "1, 2", "2, 2", "1, 2", "3, 2", "1, 3", "1, 2", "1, 3", "1, 3", 
												"1, 3", "1, 3", "1, 3", "1, 4", "1, 3", "1, 2", "2, 2", "1, 3", "1, 3", "1, 3", 
												"1, 3", "1, 3", "1, 3", "1, 4", "1, 3", "3, 3", "4, 2", "1, 3", "1, 3", "2, 3", 
												"2, 3", "1, 3", "2, 3", "2, 4", "2, 4", "1, 3", "2, 3", "2, 4", "1, 4", "1, 4", 
												"2, 3", "2, 4", "1, 4", "1, 4", "1, 4", "1, 4", "2, 4", "2, 4", "2, 4", "2, 4" };
	static char * H_twist[]  = { NULL, "15", "15", "15", "15", "15", "15", "15", "15", "21, 20, 19", "15", "21, 20, 19, 18", 
												"15", "21, 14, 13", "21, 14, 13", "15, 14", "21, 14, 13", "21, 14, 13", "21, 14, 13", "21, 14, 13", "15, 14", "21, 14, 13", 
												"21, 14, 13", "21, 14, 13", "21, 14, 13", "21, 20, 19, 14, 13", "15, 14", "21, 14, 13", "21, 14, 13", "21, 14, 13", "21, 14, 13", "21, 14, 13", 
												"21, 14, 13", "21, 14, 13", "21, 19, 14, 13", "21, 14, 13", "21, 20, 19, 14, 13", "21, 14, 13", "21, 14, 13", "21, 14, 13" , "21, 14, 13, 12", 
												"21, 14, 13", "21, 14, 13, 12", "21, 14, 13, 12", "21, 14, 13, 12, 11", "21, 14, 13, 12", "21, 14, 13", "21, 20, 14, 13", "21, 14, 13, 12", "21, 14, 13, 12", "21, 14, 13, 12", 
												"21, 14, 13, 12", "21, 14, 13, 12", "21, 14, 13, 12", "21, 14, 13, 12, 11", "21, 14, 13, 12", "21, 20, 19, 14, 13, 12", "21, 20, 19, 18, 14, 13", "21, 14, 13, 12", "21, 14, 13, 12", "21, 20, 14, 13, 12", 
												"21, 20, 14, 13, 12", "21, 14, 13, 12", "21, 20, 14, 13, 12", "21, 20, 14, 13, 12, 11", "21, 20, 14, 13, 12, 11", "21, 14, 13, 12", "21, 20, 14, 13, 12", "21, 20, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11", 
												"21, 20, 14, 13, 12", "21, 20, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11", "21, 14, 13, 12, 11" };
	static double M_wire[]   = { 0., 42.7, 64.9, 100.3, 148., 161.3, 195., 254., 276., 755., 385., 
												1357., 403.2, 471., 528., 397.9, 503.5, 554., 599., 675., 509.4, 
												644.5, 705., 728., 846., 1525., 636.7, 805.6, 774., 921., 952., 
												1106., 1132., 1186., 1313., 1323., 2428., 1039.2, 1268.9, 1152., 1255., 
												1319.7, 1509.7, 1199., 1261., 1490., 1572., 1851., 1484.6, 1698.4, 1640., 
												1649.6, 1887.1, 1592., 1537., 1852., 2979., 4005., 2076., 1847.5, 2102.2, 
												2170., 2078.5, 2365., 2372., 2575., 2342.4, 2665.3, 2800., 2479.6, 2732.3, 
												3003.2, 3092., 2789.5, 3073.9, 3099.4, 3210., 3463.9, 3810.7, 3865.9, 4253. };
	static double M_lube[]   = { 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
	static double F_break[]  = { 0., 4089., 6220., 9296., 13524., 14400., 17112., 21630., 24130., 96826., 33369., 
												180775., 34333., 41521., 49465., 29167., 45694., 46307., 52279., 62643., 36178., 
												57689., 58075., 62055., 77767., 183816., 44222., 70134., 63740., 75050., 80895., 
												98253., 90574., 100623., 117520., 126270., 284579., 79030., 106834., 88848., 103784., 
												98356., 123037., 85600., 95115., 120481., 129183., 173715., 107467., 138417., 131370., 
												119407., 153796., 112548., 112188., 148257., 319609., 466649., 166164., 133736., 172592., 
												183835., 150453., 191772., 200451., 217775., 169559., 216124., 234450., 167407., 205433., 
												249520., 260073., 188333., 226500., 209259., 224047., 23428., 283168., 261750., 316036. };
	static char * E_module[] = { NULL, "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000" };
	static char * nju[]      = { NULL, "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34" };
	static char * At[]       = { NULL, "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5" };
	static char * S0[] = { "10/1.8",   "16/2.7",  "25/4.2",  "35/6.2", "40/6.7",   "50/8.0",  "63/10.5",  "70/11",    "70/72",    "95/16",
								  "95/141",   "100/16.7","120/19",  "120/27", "125/6.9",  "125/20.4","150/19",   "150/24",   "150/34",   "160/8.9",
								  "160/26.1", "185/24",  "185/29",  "185/43", "185/128",  "200/11.1","200/32.6", "205/27",   "240/32",   "240/39",
								  "240/56",   "300/39",  "300/48",  "300/66", "300/67",   "300/204", "315/21.8", "315/51.3", "330/30",   "330/43",
								  "400/27.7", "400/51.9","400/18",  "400/22", "400/51",   "400/64",  "400/93",   "450/31.1", "450/58.3", "450/56",
								  "500/34.6", "500/64.8","500/26",  "500/27", "500/64",   "500/204", "500/336",  "550/71",   "560/38.7", "560/70.9", 
								  "600/72",   "630/43.6","630/79.8","650/79", "700/86",   "710/49.1","710/89.9", "750/93",   "800/34.6", "800/66.7", 
								  "800/101.3","800/105", "900/38.9","900/75", "1000/43.2","1000/56", "1120/47.3","1120/91.2","1250/53.8","1250/101.8" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 80 ? reduced[0] : 80, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
											    NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}
  
/////////////////
//...ÒÚ‡˚È √Œ—“;
Table * wire_compose_A_old_GOST(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "1, 6", "1, 6", "1, 6", "1, 6", "1, 6", "1, 6", "7, 11, 17", "7, 11, 17", "7, 11, 17", "7, 11, 17", 
												"7, 11, 17", "7, 12, 11, 17" };
	static char * diameter[] = { NULL, "1.80, 1.80", "2.2, 2.2", "2.8, 2.8", "3.2, 3.2", "3.8, 3.8", "4.5", "2.0, 2.0, 2.29", "2.2, 2.2, 2.59", "2.5, 2.5, 2.87", "2.8, 2.8, 3.29", 
												"3.2, 3.2, 3.66", "2.2, 2.2, 2.2, 4.24" };
	static char * N_layer[]  = { NULL, "0, 1", "0, 1", "0, 1", "0, 1", "0, 1", "0, 1", "1, 2", "1, 2", "1, 2", "1, 2", 
												"1, 2", "2, 2" };
	static char * H_twist[]  = { NULL, "15", "15", "15", "15", "15", "15", "21, 20, 19", "21, 20, 19", "21, 20, 19", "21, 20, 19", "21, 20, 19", 
												"21, 20, 19", "21, 20, 19, 18" };
	static double M_wire[]   = { 0., 62., 92., 150., 196., 275., 386, 492., 617., 771., 997., 
												1257., 1660. };
	static double M_lube[]   = { 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0, 0 };
	static double F_break[]  = { 0., 445*M_G, 665*M_G, 1078*M_G, 1410*M_G, 1980*M_G, 3230*M_G, 3970*M_G, 5060*M_G, 6245*M_G, 8150*M_G, 
												10190*M_G, 13550*M_G };
	static char * E_module[] = { NULL, "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", 
												"200000, 63000", "200000, 63000" };
	static char * nju[]      = { NULL, "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", 
												"0.3, 0.34", "0.3, 0.34" };
	static char * At[]       = { NULL, "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", 
												"1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5" };
	static char * S0[] = { "16",  "25", "35", "50", "70", "95", "120", "150", "185", "240",
								  "300", "400" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 12 ? reduced[0] : 12, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  											    NULL, NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_compose_ASU_old_GOST(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "7, 12, 18", "7, 12, 18", "7, 12, 18", "7, 12, 18", "7, 12, 12, 18", "7, 12, 12, 18" };
	static char * diameter[] = { NULL, "2.225, 2.225, 2.225", "2.5, 2.5, 2.5", "2.8, 2.8, 2.8", "3.2, 3.2, 3.2", "2.2, 2.2, 2.2, 3.55", "2.5, 2.5, 2.5, 4.125" };
	static char * N_layer[]  = { NULL, "1, 2", "1, 2", "1, 2", "1, 2", "2, 2", "2, 2" };
	static char * H_twist[]  = { NULL, "21, 20, 19", "21, 20, 19", "21, 20, 19", "21, 20, 19", "21, 20, 19, 18", "21, 20, 19, 18" };
	static double M_wire[]   = { 0., 530., 678., 850., 1111., 1390., 1840. };
	static double M_lube[]   = { 0., 0, 0, 0, 0, 0, 0 };
	static double F_break[]  = { 0., 4370*M_G, 5700*M_G, 7160*M_G, 10380*M_G, 11445*M_G, 15300*M_G };
	static char * E_module[] = { NULL, "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000" };
	static char * nju[]      = { NULL, "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34" };
	static char * At[]       = { NULL, "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5" };
	static char * S0[] = { "120", "150", "185", "240", "300", "400" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 6 ? reduced[0] : 6, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_compose_ASO_old_GOST(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "7, 9, 15", "7, 9, 15", "7, 9, 15", "7, 12, 18, 24", "7, 12, 18, 24", "7, 12, 12, 18, 24", "7, 12, 12, 18, 24", "7, 12, 12, 18, 24" };
	static char * diameter[] = { NULL, "1.8, 1.8, 2.8", "2.0, 2.0, 3.1", "2.4, 2.4, 3.59", "2.6, 2.6, 2.62", "3.0, 3.0, 3.04", "2.0, 2.0, 2.0, 3.37", "2.2, 2.2, 2.2, 3.69", "2.5, 2.5, 2.5, 4.10" };
	static char * N_layer[]  = { NULL, "1, 2", "1, 2", "1, 2", "1, 3", "1, 3", "2, 3", "2, 3", "2, 3" };
	static char * H_twist[]  = { NULL, "21, 20, 19", "21, 20, 19", "21, 20, 19", "21, 20, 19, 18", "21, 20, 19, 18", "21, 20, 19, 18, 17", "21, 20, 19, 18, 17", "21, 20, 19, 18, 17" };
	static double M_wire[]   = { 0., 539., 687., 937., 1098., 1501., 1836., 2206., 2756. };
	static double M_lube[]   = { 0., 0, 0, 0, 0, 0, 0, 0, 0 };
	static double F_break[]  = { 0., 4480*M_G, 5480*M_G, 7420*M_G, 8860*M_G, 11920*M_G, 14625*M_G, 17555*M_G, 21740*M_G };
	static char * E_module[] = { NULL, "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000", "200000, 63000" };
	static char * nju[]      = { NULL, "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34", "0.3, 0.34" };
	static char * At[]       = { NULL, "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5" };
	static char * S0[] = { "150", "185", "240", "300", "400", "500", "600", "700" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 8 ? reduced[0] : 8, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_compose_B(int id_static_char, int * reduced = NULL)
{
	static double M_lube[] = { 0., 1., 1., 1.5, 2.5, MAX_HIT, 3., MAX_HIT, 4.5, 38., 6., 
											 69., MAX_HIT, 11., 14., MAX_HIT, MAX_HIT, 12., 14., 18., MAX_HIT, 
											 MAX_HIT, 14., 16., 23., 63., MAX_HIT, MAX_HIT, 15., 17., 22., 
											 30., 22., 27., 37., 37., 102., MAX_HIT, MAX_HIT, 16., 23., 
											 MAX_HIT, MAX_HIT, 12., 12., 28., 35., 53., MAX_HIT, MAX_HIT, 30., 
											 MAX_HIT, MAX_HIT, 15., 15., 33., 105., 168., 38., MAX_HIT, MAX_HIT, 
											 39., MAX_HIT, MAX_HIT, 42., 46., MAX_HIT, MAX_HIT, 49., MAX_HIT, MAX_HIT, 
											 MAX_HIT, 57., MAX_HIT, MAX_HIT, MAX_HIT, 30., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	Table * table = wire_compose_A(id_static_char, reduced);
	if (id_static_char == SPECIAL_STATE)
		table->table[5].parm_values = M_lube;
	else if (reduced)
	for (int k = 1; k <= reduced[0]; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
	else
	for (int k = 1; k <= table->N_group; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[k];

	return table;
}

Table * wire_compose_C(int id_static_char, int * reduced = NULL)
{
	Table * table = wire_compose_B(id_static_char, reduced);
	return table;
}

Table * wire_compose_D(int id_static_char, int * reduced = NULL)
{
	static double M_lube[] = { 0., 0.56, 0.56, 0.56, 0.84, MAX_HIT, 0.84, MAX_HIT, 2.12, 21., 1.4, 
											 29., MAX_HIT, 11., 14., MAX_HIT, MAX_HIT, 11., 13., 17., MAX_HIT, 
											 MAX_HIT, 13., 15., 20., 27., MAX_HIT, MAX_HIT, 14., 16., 18., 
											 25., 18., 22., 20., 20., 39., MAX_HIT, MAX_HIT, 14., 21., 
											 MAX_HIT, MAX_HIT, 12., 12., 24., 28., 27., MAX_HIT, MAX_HIT, 25., 
											 MAX_HIT, MAX_HIT, 14., 14., 28., 23., 49., 30., MAX_HIT, MAX_HIT, 
											 22., MAX_HIT, MAX_HIT, 23., 24., MAX_HIT, MAX_HIT, 27., MAX_HIT, MAX_HIT, 
											 MAX_HIT, 29., MAX_HIT, MAX_HIT, MAX_HIT, 25., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT };
	Table * table = wire_compose_A(id_static_char, reduced);
	if (id_static_char == SPECIAL_STATE)
		table->table[5].parm_values = M_lube;
	else if (reduced)
	for (int k = 1; k <= reduced[0]; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
	else
	for (int k = 1; k <= table->N_group; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[k];

	return table;
}

Table * wire_compose_D_old_GOST(int id_static_char, int * reduced = NULL)
{
	static double M_lube[] = { 0., 2., 2., 2., 3., 3., 4., 15., 12., 14., 17., 
											23., 31. };
	Table * table = wire_compose_A_old_GOST(id_static_char, reduced);
	if (id_static_char == SPECIAL_STATE)
		table->table[5].parm_values = M_lube;
	else if (reduced)
	for (int k = 1; k <= reduced[0]; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
	else
	for (int k = 1; k <= table->N_group; k++)
		((double *)(table->table[5].parm_values))[k] = M_lube[k];

	return table;
}

Table * wire_compose_E(int id_static_char, int * reduced = NULL)
{//...‰ÓÔÓÎÌËÚÂÎ¸Ì˚Â ‰‡ÌÌ˚Â ÔÓ „ÓÁÓÚÓÒ‡Ï;
	static char * N_wire[]   = { NULL, "19, 0", "19, 0" };
	static char * diameter[] = { NULL, "1.90, 1.80, 1.80", "2.30, 2.20, 2.20" };
	static char * N_layer[]  = { NULL, "2, 0", "2, 0" };
	static char * H_twist[]  = { NULL, "14, 13", "14, 13" };
	static double M_wire[]   = { 0., 418., 623.};
	static double M_lube[]   = { 0., 0., 0.};
	static double F_break[]  = { 0., 61200., 78300. };
	static char * E_module[] = { NULL, "200000", "200000" };
	static char * nju[]      = { NULL, "0.3", "0.3" };
	static char * At[]       = { NULL, "1.2e-5", "1.2e-5" };
	static char * S0[] = { "50", "70" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 2 ? reduced[0] : 2, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_compose_TK(int id_static_char, int * reduced = NULL)
{//...‰‡ÌÌ˚Â ÔÓ „ÓÁÓÚÓÒ‡Ï “  (— -- series);
	static char * N_wire[]   = { NULL, "7, 12, 0", "7, 12, 0", "7, 12, 0", "7, 12, 0", "7, 12, 0", "7, 12, 0", "7, 12, 0", "7, 12, 0", "7, 12, 0", "7, 12, 0", 
												"7, 12, 0" };
	static char * diameter[] = { NULL, "1.60, 1.50, 1.50", "1.70, 1.60, 1.60", "1.80, 1.70, 1.70", "1.90, 1.80, 1.80", "2.10, 2.00, 2.00", "2.30, 2.20, 2.20", "2.50, 2.40, 2.40", "2.80, 2.60, 2.60", "3.00, 2.80, 2.80", "3.20, 3.00, 3.00", 
												"3.40, 3.20, 3.20" };
	static char * N_layer[]  = { NULL, "2, 0", "2, 0", "2, 0", "2, 0", "2, 0", "2, 0", "2, 0", "2, 0", "2, 0", "2, 0", 
												"2, 0" };
	static char * H_twist[]  = { NULL, "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", "14, 13", 
												"14, 13" };
	static double M_wire[]   = { 0., 291., 330., 373., 418., 515., 623., 741., 873., 1015., 1160., 
												1320. };
	static double M_lube[]   = { 0., 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
												0 };
	static double F_break[]  = { 0., 42550., 48400., 54650., 61200., 75600., 78300., 93150., 109500., 126500., 145500., 
												172500. };
	static char * E_module[] = { NULL, "200000", "200000", "200000", "200000", "200000", "200000", "200000", "200000", "200000", "200000", 
												"200000" };
	static char * nju[]      = { NULL, "0.3", "0.3", "0.3", "0.3", "0.3", "0.3", "0.3", "0.3", "0.3", "0.3", 
												"0.3" };
	static char * At[]       = { NULL, "1.2e-5", "1.2e-5", "1.2e-5", "1.2e-5", "1.2e-5", "1.2e-5", "1.2e-5", "1.2e-5", "1.2e-5", "1.2e-5", 
												"1.2e-5" };
	static char * S0[] = { "35",  "40",  "45",  "50",  "60",  "70",  "90",  "100",  "120",  "140", 
								  "160" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 11 ? reduced[0] : 11, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 
  											    NULL };
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}  

////////////////////////////////////////////////////////////////////
//...Ú‡·ÎËˆ˚ ‰Îˇ ÒÂ˜ÂÌËˇ ËÁ ÚÂÏÓÓ·‡·ÓÚ‡ÌÌ˚ı ÔÓ Ï‡ÚÂË‡ÎÛ ÔÓ‚Ó‰Ó‚;
Table * wire_termo_A(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "7", "7", "7", "7", "7", "7, 12", "7, 12", "7, 12", "7, 12" };
	static char * diameter[] = { NULL, "1.70, 1.70", "2.13, 2.13", "2.50, 2.50", "3.00, 3.00", "4.12, 4.12", "2.80, 2.80, 2.80", "3.15, 3.15, 3.15", "3.50, 3.50, 3.50", "4.00, 4.00, 4.00" };
	static char * N_layer[]  = { NULL, "1", "1", "1", "1", "1", "2", "2", "2", "2" };
	static char * H_twist[]  = { NULL, "15", "15", "15", "15", "15", "14, 13", "14, 13", "14, 13", "14, 13" };
	static double M_wire[]   = { 0., 43., 68., 94., 135., 259.3, 321., 406., 502., 668.7 };
	static double M_lube[]   = { 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.};
	static double F_break[]  = { 0., 3734., 5370., 7389., 10662., 19500., 25186., 31900., 39386., 49950. };
	static char * E_module[] = { NULL, "65000", "65000", "65000", "65000", "65000", "65000", "65000", "65000", "65000" };
	static char * nju[]      = { NULL, "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34" };
	static char * At[]       = { NULL, "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5" };
	static char * S0[] = { "16", "25", "35", "50", "95", "120", "150", "185", "240" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 9 ? reduced[0] : 9, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_termo_B(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "7", "7", "7", "7", "7, 12", "7, 12", "7, 12" };
	static char * diameter[] = { NULL, "1.70, 1.70", "2.13, 2.13", "2.50, 2.50", "3.00, 3.00", "2.80, 2.80, 2.80", "3.15, 3.15, 3.15", "3.50, 3.50, 3.50" };
	static char * N_layer[]  = { NULL, "1", "1", "1", "1", "2", "2", "2" };
	static char * H_twist[]  = { NULL, "15", "15", "15", "15", "14, 13", "14, 13", "14, 13"};
	static double M_wire[]   = { 0., 43., 68., 94., 135., 321., 406., 502.};
	static double M_lube[]   = { 0., 0.5, 0.5, 0.5, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT};
	static double F_break[]  = { 0., 3734., 5370., 7389., 10662., 25186., 31900., 39386. };
	static char * E_module[] = { NULL, "65000", "65000", "65000", "65000", "65000", "65000", "65000" };
	static char * nju[]      = { NULL, "0.34", "0.34", "0.34", "0.34", "0.34", "0.34", "0.34" };
	static char * At[]       = { NULL, "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5", "2.3e-5" };
	static char * S0[] = { "16", "25", "35", "50", "120", "150", "185" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 7 ? reduced[0] : 7, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL};
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

Table * wire_termo_C(int id_static_char, int * reduced = NULL)
{
	static double F_break[] = { 0., 4900., 7350., 10120., 14580., 26590., 34470., 43663., 53864., 68120. };
	Table * table = wire_termo_A(id_static_char, reduced);
	if (id_static_char == SPECIAL_STATE)
		table->table[6].parm_values = F_break;
	else if (reduced)
	for (int k = 1; k <= reduced[0]; k++)
		((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
	else
	for (int k = 1; k <= table->N_group; k++)
		((double *)(table->table[6].parm_values))[k] = F_break[k];

	return table;
}

Table * wire_termo_D(int id_static_char, int * reduced = NULL)
{
	static double F_break[] = { 0., 4900., 7350., 10120., 14580., 34470., 43663., 53864. };
	Table * table = wire_termo_B(id_static_char, reduced);
	if (id_static_char == SPECIAL_STATE)
		table->table[6].parm_values = F_break;
	else if (reduced)
	for (int k = 1; k <= reduced[0]; k++)
		((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
	else
	for (int k = 1; k <= table->N_group; k++)
		((double *)(table->table[6].parm_values))[k] = F_break[k];

	return table;
}

Table * wire_compose_termo_E(int id_static_char, int * reduced = NULL)
{
	static char * N_wire[]   = { NULL, "7, 12", "7, 12, 18, 24, 24, 30" };
	static char * diameter[] = { NULL, "2.65, 2.65, 2.65", "2.65, 2.65, 2.65, 2.65, 2.65, 3.40, 3.40" };
	static char * N_layer[]  = { NULL, "1 1", "4 2" };
	static char * H_twist[]  = { NULL, "15 14", "21, 20, 19, 18, 14"};
	static double M_wire[]   = { 0., 484., 4005.};
	static double M_lube[]   = { 0., 0., 0.};
	static double F_break[]  = { 0., 65000., 530000. };
	static char * E_module[] = { NULL, "200000, 65000", "200000, 65000" };
	static char * nju[]      = { NULL, "0.3, 0.34", "0.3, 0.34" };
	static char * At[]       = { NULL, "1.2e-5, 2.3e-5", "1.2e-5, 2.3e-5" };
	static char * S0[] = { "70/39", "500/336" };
	Table * table = GetWireDataBaseTable(reduced && reduced[0] <= 2 ? reduced[0] : 2, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = N_wire;
		table->table[1].parm_values = diameter;
		table->table[2].parm_values = N_layer;
		table->table[3].parm_values = H_twist;
		table->table[4].parm_values = M_wire;
		table->table[5].parm_values = M_lube;
		table->table[6].parm_values = F_break;
		table->table[7].parm_values = E_module;
		table->table[8].parm_values = nju;
		table->table[9].parm_values = At;
	}
	else if (reduced) {
		static char * S0_reduced[] = { NULL, NULL, NULL, NULL, NULL, NULL, NULL};
		for (int k = 1; k <= reduced[0]; k++) {
			((char  **)(table->table[0].parm_values))[k] = N_wire[reduced[k]];
			((char  **)(table->table[1].parm_values))[k] = diameter[reduced[k]];
			((char  **)(table->table[2].parm_values))[k] = N_layer[reduced[k]];
			((char  **)(table->table[3].parm_values))[k] = H_twist[reduced[k]];
			((double *)(table->table[4].parm_values))[k] = M_wire[reduced[k]];
			((double *)(table->table[5].parm_values))[k] = M_lube[reduced[k]];
			((double *)(table->table[6].parm_values))[k] = F_break[reduced[k]];
			((char  **)(table->table[7].parm_values))[k] = E_module[reduced[k]];
			((char  **)(table->table[8].parm_values))[k] = nju[reduced[k]];
			((char  **)(table->table[9].parm_values))[k] = At[reduced[k]];
         S0_reduced[k-1] = S0[reduced[k]-1];
		}
		table->table_names = S0_reduced;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((char  **)(table->table[0].parm_values))[k] = N_wire[k];
		((char  **)(table->table[1].parm_values))[k] = diameter[k];
		((char  **)(table->table[2].parm_values))[k] = N_layer[k];
		((char  **)(table->table[3].parm_values))[k] = H_twist[k];
		((double *)(table->table[4].parm_values))[k] = M_wire[k];
		((double *)(table->table[5].parm_values))[k] = M_lube[k];
		((double *)(table->table[6].parm_values))[k] = F_break[k];
		((char  **)(table->table[7].parm_values))[k] = E_module[k];
		((char  **)(table->table[8].parm_values))[k] = nju[k];
		((char  **)(table->table[9].parm_values))[k] = At[k];
	}
	return table;
}

////////////////////////////////////////////////////////////
//...ÙÛÌÍˆËˇ Ó·‡ÁÓ‚‡ÌËˇ ÍÓÌÚÂÍÒÚ‡ ‰Îˇ ·‡Á˚ ‰‡ÌÌ˚ı ÔÓ‚Ó‰Ó‚;
void * CreateWIREContext(int N_sm)
{
	if (N_sm < 0 || N_sm >= NUM_WIRE_SAMPLES) N_sm = 0;

	Context * cont = (Context *)new_struct(sizeof(Context));
	if (! cont) return(NULL);

	cont->N           = N_sm+SHIFT_WIRE_SAMPLES;
	cont->static_char = SPECIAL_STATE;
	cont->sample_name = GetWIRESampleName(N_sm);
	cont->GOST_name   = GetWIREGOSTName  (N_sm);
	cont->units       = UNIT_WIRE;

	switch (cont->N-SHIFT_WIRE_SAMPLES) {
		case _WIRE1:  cont->table = wire_uniform_A(cont->static_char); break; //Ã -- series;
		case _WIRE2:  cont->table = wire_uniform_B(cont->static_char); break; //A -- series;
		case _WIRE3:  cont->table = wire_uniform_C(cont->static_char); break; //A œ -- series;
		case _WIRE4:  cont->table = wire_compose_A(cont->static_char); break; //AC -- series;
		case _WIRE5:  cont->table = wire_compose_B(cont->static_char); break; //¿— — -- series;
		case _WIRE6:  cont->table = wire_compose_C(cont->static_char); break; //¿— œ -- series;
		case _WIRE7:  cont->table = wire_compose_D(cont->static_char); break; //¿—  -- series;
		case _WIRE8:  cont->table = wire_termo_A(cont->static_char); break; //¿Õ -- series;
		case _WIRE9:  cont->table = wire_termo_B(cont->static_char); break; //¿Õ œ -- series;
		case _WIRE10: cont->table = wire_termo_C(cont->static_char); break; //¿∆ -- series;
		case _WIRE11: cont->table = wire_termo_D(cont->static_char); break; //¿∆ œ -- series; 
		case _WIRE12: cont->table = wire_compose_termo_E(cont->static_char); break; //A∆C -- series („ÓÁÓÚÓÒ˚); 
		case _WIRE13: cont->table = wire_compose_TK(cont->static_char); break; //C -- series („ÓÁÓÚÓÒ˚ ÒÂËË “ ); 
/////////////////
//...ÒÚ‡˚È √Œ—“;
		case _WIRE14:  cont->table = wire_compose_A_old_GOST(cont->static_char); break; //AC -- series;
		case _WIRE15:  cont->table = wire_compose_D_old_GOST(cont->static_char); break; //¿—  -- series;
		case _WIRE16:  cont->table = wire_compose_ASU_old_GOST(cont->static_char); break; //AC” -- ÛÒËÎÂÌÌ‡ˇ ÒÂËˇ;
		case _WIRE17:  cont->table = wire_compose_ASO_old_GOST(cont->static_char); break; //ACŒ -- Ó·ÎÂ„˜ÂÌÌ‡ˇ ÒÂËˇ;
	}
	set_default    (cont);
	set_table_units(cont->table, UNIT_WIRE);

	SetTableIndex(cont, 1);
	SetUnits     (cont, UNIT_WIRE); return (void *)cont;
}

///////////////////////////////////////////////////////////////////////////////////
//...ÙÛÌÍˆËˇ Ó·‡ÁÓ‚‡ÌËˇ ÍÓÌÚÂÍÒÚ‡ ‰Îˇ ·‡Á˚ ‰‡ÌÌ˚ı Á‡˘ËÚÌÓ„Ó Ó·ÓÛ‰Ó‚‡ÌËˇ ÔÓ‚Ó‰Ó‚;
void * CreateREDUCEDWIREContext(int N_sm)
{
  if (N_sm < 0 || N_sm >= NUM_REDUCEDWIRE_SAMPLES) N_sm = 0;

  Context * cont = (Context *)new_struct(sizeof(Context));
  if (! cont) return(NULL);

  cont->N           = N_sm+SHIFT_REDUCEDWIRE_SAMPLES;
  cont->static_char = ADDITIONAL_STATE;
  cont->sample_name = GetREDUCEDWIRESampleName(N_sm);
  cont->GOST_name   = GetREDUCEDWIREGOSTName  (N_sm);
  cont->units       = UNIT_WIRE;

  switch (cont->N-SHIFT_REDUCEDWIRE_SAMPLES) {
      case _REDUCEDWIRE1: { //reduced AC -- series; 
							int reduced[] = { 40, 8, 10, 13, 14, 9, 17, 18, 19, 11, 22, 23, 24, 28, 25, 29, 30, 31, 32, 33, 34, 35, 39, 40, 43, 36, 44, 45, 46, 47, 50, 53, 54, 55, 58, 61, 64, 57, 65, 68, 72 };
							cont->table = wire_compose_A(cont->static_char, reduced);
							cont->N = _WIRE4+SHIFT_WIRE_SAMPLES;
		}					break;
      case _REDUCEDWIRE2: { //A∆C -- series;
							cont->table = wire_compose_termo_E(cont->static_char);
							cont->N = _WIRE12+SHIFT_WIRE_SAMPLES;
		}					break;
      case _REDUCEDWIRE3: { //C -- series („ÓÁÓÚÓÒ˚ ÒÂËË “ ); 
							cont->table = wire_compose_TK(cont->static_char);
							cont->N = _WIRE13+SHIFT_WIRE_SAMPLES;
		}					break;
      case _REDUCEDWIRE4: { //reduced A -- series;
							int reduced[] = { 14, 9, 11, 13, 15, 17, 19, 21, 22, 23, 24, 25, 27, 29, 30 };
							cont->table = wire_uniform_B(cont->static_char, reduced);
							cont->N = _WIRE2+SHIFT_WIRE_SAMPLES;
		}					break;
      case _REDUCEDWIRE5: { //reduced termo -- series ¿Õ; 
							int reduced[] = { 5, 5, 6, 7, 8, 9 };
							cont->table = wire_termo_A(cont->static_char, reduced);
							cont->N = _WIRE8+SHIFT_WIRE_SAMPLES;
		}					break;
      case _REDUCEDWIRE6: { //reduced termo -- series ¿∆; 
							int reduced[] = { 5, 5, 6, 7, 8, 9 };
							cont->table = wire_termo_C(cont->static_char, reduced);
							cont->N = _WIRE10+SHIFT_WIRE_SAMPLES;
		}					break;
  }
  set_default    (cont);
  set_table_units(cont->table, UNIT_WIRE);
  
  SetTableIndex(cont, 1);
  SetUnits     (cont, UNIT_WIRE); return (void *)cont;
}

////////////////////////////////////////////////////////////
//...ËÁ‚ÎÂ˜ÂÌËÂ ÌÓÏÂ‡ Â‰ÛˆËÓ‚‡ÌÌÓ„Ó Ó·‡Áˆ‡ ËÁ ÍÓÌÚÂÍÒÚ‡;
int GetREDUCEDWIRENumber(void * context)
{
	Context * cont = (Context *)context;
	if (cont)
	switch (cont->N-SHIFT_WIRE_SAMPLES) {
		case _WIRE2:  return(_REDUCEDWIRE4+SHIFT_REDUCEDWIRE_SAMPLES);
		case _WIRE4:  return(_REDUCEDWIRE1+SHIFT_REDUCEDWIRE_SAMPLES);
		case _WIRE8:  return(_REDUCEDWIRE5+SHIFT_REDUCEDWIRE_SAMPLES);
		case _WIRE10: return(_REDUCEDWIRE6+SHIFT_REDUCEDWIRE_SAMPLES);
		case _WIRE12: return(_REDUCEDWIRE2+SHIFT_REDUCEDWIRE_SAMPLES);
		case _WIRE13: return(_REDUCEDWIRE3+SHIFT_REDUCEDWIRE_SAMPLES);
		default: return(NUM_SAMPLE_ERR);
	}
	return(NUM_SAMPLE_ERR);
}

/*
/*===============================================================================================*/
/*                                 »Õ»÷»¿À»«¿÷»ﬂ Œ¡–¿«÷¿                                         */
/*===============================================================================================*/
////////////////////////////////////////////////////////////////////
//...ÔpÂ‰‚‡pËÚÂÎ¸Ì‡ˇ ËÌËˆË‡ÎËÁ‡ˆËˇ ÒÂ˜ÂÌËÈ ‰Îˇ ·‡Á˚ ‰‡ÌÌ˚ı ÔÓ‚Ó‰Ó‚;
#ifndef ___ABRIDGE_PROFILE_MODE___
int wire2D_init(void * context, CGrid * block_nd)
{
  Context * cont = (Context *)context;
  int  units_tab = cont->units;

  if (! is_Wire2D(cont)  || ! cont->table) return(0);
  if (cont->table->index > 0) units_tab = cont->table->table_units[cont->table->index-1];

  Table * tab = cont->table;
  double M_wire, M_lube, diam = 1., H_tw = 0., E0 = 2.1e11, nju0 = 0.3, At0 = 0.;
  char * N_wire, * diameter, * N_layer, * H_twist, * E_module, * nju, * At;
  int    N_lr1 = 0, N_lr2 = 0, NW, k;

  double metric_stress = GetMetricStress(cont->units, units_tab), 
         metric_length = GetMetricLength(cont->units, units_tab),
			metric_temper = GetMetricTemperature(units_tab, cont->units);

  cont->left = cont->right = cont->bottom = cont->top = cont->back = cont->front = 0.;

  DeleteSample(cont->sm);

 char buf[200];
 unsigned long count1 = 0, count2 = 0, count3 = 0, count4 = 0, count5 = 0, count6 = 0, count7 = 0, 
               upper1, upper2, upper3, upper4, upper5, upper6, upper7;

  switch (cont->N-SHIFT_WIRE_SAMPLES) {
     case _WIRE1: //uniform series;
     case _WIRE2:
     case _WIRE3:
     case _WIRE8: //termo series;
     case _WIRE9:
     case _WIRE10:
     case _WIRE11: { 
                  N_wire   = ((char  **)tab->table[0].parm_values)[tab->index];
                  diameter = ((char  **)tab->table[1].parm_values)[tab->index];
                  N_layer  = ((char  **)tab->table[2].parm_values)[tab->index];
                  H_twist  = ((char  **)tab->table[3].parm_values)[tab->index];
                  M_wire   = ((double *)tab->table[4].parm_values)[tab->index];
                  M_lube   = ((double *)tab->table[5].parm_values)[tab->index];
						E_module = ((char  **)tab->table[7].parm_values)[tab->index];
                  nju      = ((char  **)tab->table[8].parm_values)[tab->index];
                  At       = ((char  **)tab->table[9].parm_values)[tab->index];
                  
                  double D = 0., P0[2], f0, tg, a, b, tg_gamma, gamma, d;
                  CCells * ce;
                  if ((cont->sm = CreateSample(WIRE2D_SAMPLE)) != 0) {

                      upper1 = (unsigned long)user_strlen(diameter);
                      upper2 = (unsigned long)user_strlen(H_twist);
                      upper3 = (unsigned long)user_strlen(E_module);
                      upper4 = (unsigned long)user_strlen(nju);
                      upper5 = (unsigned long)user_strlen(N_layer);
                      upper6 = (unsigned long)user_strlen(At);
                      upper7 = (unsigned long)user_strlen(N_wire);

                      if (user_Read (buf, E_module, count3, upper3)) E0 = user_strtod(buf)*metric_stress;
                      if (user_Read (buf, nju, count4, upper4)) nju0 = user_strtod(buf);
                      if (user_Read (buf, At, count6, upper6)) At0 = user_strtod(buf)*metric_temper;
                      cont->sm->set_param(3, E0); //Ô‡‡ÏÂÚ˚ Ï‡ÚÂ‡Î‡ Ù‡ÍˆËÈ;
                      cont->sm->set_param(4, nju0);
                      cont->sm->set_param(5, At0);
                      cont->sm->set_param(6, E0);
                      cont->sm->set_param(7, nju0);
                      cont->sm->set_param(8, At0);
                      cont->sm->set_param(9, M_wire);
                      cont->sm->set_param(10, M_lube);
							 if (cont->N-SHIFT_WIRE_SAMPLES == _WIRE3 || 
								  cont->N-SHIFT_WIRE_SAMPLES == _WIRE6 || 
								  cont->N-SHIFT_WIRE_SAMPLES == _WIRE9 || 
								  cont->N-SHIFT_WIRE_SAMPLES == _WIRE11)
								  cont->sm->set_param(11, 1.); //...lube indication;

                     
//////////////////////////////////////
//...ÔÂ‚˚È ·ÎÓÍ -- ÒÂ‰Â˜ÌËÍ ÔÓ‚Ó‰‡;
                     if (user_Read (buf, diameter, count1, upper1)) diam = user_strtod(buf)*metric_length;
                     if (cont->sm->add_block(NULL_BLOCK)                                            &&
                         cont->sm->set_block(cont->sm->B[cont->sm->N-1], SPHERE_GENUS, (D+diam)*.5) &&
                         cont->sm->set_link (cont->sm->B[cont->sm->N-1], 1)) {
                         cont->sm->B[cont->sm->N-1].bar = new CCells;
                         cont->sm->B[cont->sm->N-1].bar->cells_new(1, 2, 0);
                         ce = new CCells;  ce->get_arc((D+diam)*.5, -M_PI, M_PI);  
                         cont->sm->B[cont->sm->N-1].bar->bar_add(ce);
                         cont->sm->B[cont->sm->N-1].bar->bar_ord();
                     }
                     delete_struct(cont->sm->link);
                     
                     if (user_Read (buf, N_layer, count5, upper5)) N_lr1 = atoi(buf);
                     cont->sm->link = (Topo *)new_struct((N_lr1+3)*sizeof(Topo));
                     cont->sm->link[0] = N_lr1;
                     cont->sm->link[1] = 0;

///////////////////////////
//...ˆËÍÎ ÔÓ ÒÎÓˇÏ ÔÓ‚Ó‰‡;
							int num;
							for (num = 0; num < N_lr1; num++) {
                          cont->sm->link[num+2] = cont->sm->N;
                          D += diam;
                          if (user_Read (buf, diameter, count1, upper1)) diam = user_strtod(buf)*metric_length;
                          if (user_Read (buf, H_twist,  count2, upper2)) H_tw = user_strtod(buf);
                          D += diam;
                          tg = M_PI/H_tw;
                          b  = diam;
                          a  = b*sqrt(1.+tg*tg);
                          tg_gamma = 1./sqrt(D*D-b*b);
                          gamma = atan(tg_gamma*b);

								  if (user_Read (buf, N_wire, count7, upper7)) NW = atoi(buf)-(! num ? 1 : 0);
								  else NW = (int)(M_PI/gamma+.3);

                          d  = (D-b)*sqrt(1.*tg_gamma*tg_gamma*b*b)*(1.+b/D);
                          d *= M_PI-gamma*NW;
                          for (k = 0; k < NW; k++) {
                               cont->sm->add_block(NULL_BLOCK);

                               f0 = (2.*M_PI/NW)*(k+.5*(NW % 2)*0.)+(num % 2)*M_PI_2;
                               P0[0] = D*.5*cos(f0);
                               P0[1] = D*.5*sin(f0);
                               
                               cont->sm->set_block(cont->sm->B[cont->sm->N-1], SPHERE_GENUS, diam*.5, 0, P0[0], P0[1]);
                               cont->sm->set_link (cont->sm->B[cont->sm->N-1], 1);
                               cont->sm->B[cont->sm->N-1].bar = new CCells;
                               cont->sm->B[cont->sm->N-1].bar->cells_new(1, 2, 0);

                               ce = new CCells;  ce->get_ellipt_arc(a, b, -M_PI, M_PI);
                               cont->sm->B[cont->sm->N-1].bar->bar_add(ce);
                               cont->sm->B[cont->sm->N-1].bar->bar_ord();

                               P0[0] = D*.5;
                               P0[1] = 0.;
                               cont->sm->B[cont->sm->N-1].bar->cells_iso(P0, M_PI_2);
                               cont->sm->B[cont->sm->N-1].bar->cells_iso(NULL, f0);
                          }
                     }
							cont->sm->link[num+2] = cont->sm->N;

////////////////////////////////////////////////////////////////
//...Ó„Ë·‡˛˘‡ˇ ‚ÒÂÈ „ÂÓÏÂÚËË -- ÓÍÛÊÌÓÒÚ¸ ÔÓÒÎÂ‰ÌÂ„Ó ‰Ë‡ÏÂÚ‡;
                     cont->sm->bar = new CCells;
                     ((CCells *)cont->sm->bar)->get_circle_profile((D+diam)*.5);
                  }
/////////////////////////////
//...ÔÂÂÛÒÚ‡Ì‡‚ÎË‚‡ÂÏ ‡ÏÍÛ;
                  cont->left   = -(cont->right = (D+diam)*.5);
                  cont->bottom = -(cont->top   = (D+diam)*.5); 
     }            break;
     case _WIRE4: //compose series (‚ÍÎ˛˜‡ˇ ¿∆— Ë —);
     case _WIRE5:
     case _WIRE6:
     case _WIRE7:
     case _WIRE12:
     case _WIRE13:
/////////////////
//...ÒÚ‡˚È √Œ—“;
     case _WIRE14:
     case _WIRE15:
     case _WIRE16:
     case _WIRE17: { 
                  N_wire   = ((char  **)tab->table[0].parm_values)[tab->index];
                  diameter = ((char  **)tab->table[1].parm_values)[tab->index];
                  N_layer  = ((char  **)tab->table[2].parm_values)[tab->index];
                  H_twist  = ((char  **)tab->table[3].parm_values)[tab->index];
                  M_wire   = ((double *)tab->table[4].parm_values)[tab->index];
                  M_lube   = ((double *)tab->table[5].parm_values)[tab->index];
						E_module = ((char  **)tab->table[7].parm_values)[tab->index];
                  nju      = ((char  **)tab->table[8].parm_values)[tab->index];
                  At       = ((char  **)tab->table[9].parm_values)[tab->index];
                  
                  double D = 0., P0[2], f0, tg, a, b, tg_gamma, gamma, d;
                  CCells * ce;
                  if ((cont->sm = CreateSample(WIRE2D_SAMPLE)) != 0) {

                      upper1 = (unsigned int)user_strlen(diameter);
                      upper2 = (unsigned int)user_strlen(H_twist);
                      upper3 = (unsigned int)user_strlen(E_module);
                      upper4 = (unsigned int)user_strlen(nju);
                      upper5 = (unsigned int)user_strlen(N_layer);
                      upper6 = (unsigned int)user_strlen(At);
                      upper7 = (unsigned int)user_strlen(N_wire);

                      if (user_Read (buf, E_module, count3, upper3)) E0 = user_strtod(buf)*metric_stress;
                      if (user_Read (buf, nju, count4, upper4)) nju0 = user_strtod(buf);
                      if (user_Read (buf, At, count6, upper6)) At0 = user_strtod(buf)*metric_temper;
                      cont->sm->set_param(3, E0); //Ô‡‡ÏÂÚ˚ Ï‡ÚÂ‡Î‡ Ù‡ÍˆËÈ;
                      cont->sm->set_param(4, nju0);
                      cont->sm->set_param(5, At0);
                      if (user_Read (buf, E_module, count3, upper3)) E0 = user_strtod(buf)*metric_stress;
                      if (user_Read (buf, nju, count4, upper4)) nju0 = user_strtod(buf);
                      if (user_Read (buf, At, count6, upper6)) At0 = user_strtod(buf)*metric_temper;
                      cont->sm->set_param(6, E0);
                      cont->sm->set_param(7, nju0);
                      cont->sm->set_param(8, At0);
                      cont->sm->set_param(9, M_wire);
                      cont->sm->set_param(10, M_lube);
							 if (cont->N-SHIFT_WIRE_SAMPLES == _WIRE6)
                      cont->sm->set_param(11, 1.); //...lube indication;
					       if (cont->N-SHIFT_WIRE_SAMPLES == _WIRE5)
                      cont->sm->set_param(11, 2.); //...core lube indication;
					       if (cont->N-SHIFT_WIRE_SAMPLES == _WIRE7 || cont->N-SHIFT_WIRE_SAMPLES == _WIRE15)
                      cont->sm->set_param(11, 3.); //...core lube and insulation indication;
					       if (cont->N-SHIFT_WIRE_SAMPLES == _WIRE13)
                      cont->sm->set_param(11, 4.); //...core lube and insulation indication for rope;
                     
//////////////////////////////////////
//...ÔÂ‚˚È ·ÎÓÍ -- ÒÂ‰Â˜ÌËÍ ÔÓ‚Ó‰‡;
                     if (user_Read (buf, diameter, count1, upper1)) diam = user_strtod(buf)*metric_length;
                     if (cont->sm->add_block(NULL_BLOCK)                                                &&
                         cont->sm->set_block(cont->sm->B[cont->sm->N-1], SPHERE_GENUS, (D+diam)*.5) &&
                         cont->sm->set_link (cont->sm->B[cont->sm->N-1], 1)) {
                         cont->sm->B[cont->sm->N-1].bar = new CCells;
                         cont->sm->B[cont->sm->N-1].bar->cells_new(1, 2, 0);
                         ce = new CCells;  ce->get_arc((D+diam)*.5, -M_PI, M_PI);  
                         cont->sm->B[cont->sm->N-1].bar->bar_add(ce);
                         cont->sm->B[cont->sm->N-1].bar->bar_ord();
                     }
                     delete_struct(cont->sm->link);
                     if (user_Read (buf, N_layer, count5, upper5)) N_lr1 = N_lr2 = atoi(buf);
                     if (user_Read (buf, N_layer, count5, upper5)) N_lr2 = atoi(buf);
                     cont->sm->link = (Topo *)new_struct((N_lr1+N_lr2+3)*sizeof(Topo));
                     cont->sm->link[0] = N_lr1;
                     cont->sm->link[1] = N_lr1+N_lr2;

///////////////////////////
//...ˆËÍÎ ÔÓ ÒÎÓˇÏ ÔÓ‚Ó‰‡;
							if (! N_lr1 && user_Read (buf, N_wire, count7, upper7)) NW = atoi(buf);
							int num;
							for (num = 0; num < N_lr1+N_lr2; num++) {
                          cont->sm->link[num+2] = cont->sm->N;
                          D += diam;
                          if (user_Read (buf, diameter, count1, upper1)) diam = user_strtod(buf)*metric_length;
                          if (user_Read (buf, H_twist,  count2, upper2)) H_tw = user_strtod(buf);
                          D += diam;
                          tg = M_PI/H_tw;
                          b  = diam;
                          a  = b*sqrt(1.+tg*tg);
                          tg_gamma = 1./sqrt(D*D-b*b);
                          gamma = atan(tg_gamma*b)+EE_res;

								  if (user_Read (buf, N_wire, count7, upper7)) NW = atoi(buf)-(! num && N_lr1 ? 1 : 0);
								  else  NW = (int)(M_PI/gamma);

                          d  = (D-b)*sqrt(1.*tg_gamma*tg_gamma*a*a)*(1.+b/D);
                          d *= M_PI-gamma*NW;
                          for (k = 0; k < NW; k++) {
                               cont->sm->add_block(NULL_BLOCK);

                               f0 = (2.*M_PI/NW)*(k+.5*(NW % 2)*0.)+(num % 2)*M_PI_2;
                               P0[0] = D*.5*cos(f0);
                               P0[1] = D*.5*sin(f0);
                               
                               cont->sm->set_block(cont->sm->B[cont->sm->N-1], SPHERE_GENUS, diam*.5, 0, P0[0], P0[1]);
                               cont->sm->set_link (cont->sm->B[cont->sm->N-1], 1);
                               cont->sm->B[cont->sm->N-1].bar = new CCells;
                               cont->sm->B[cont->sm->N-1].bar->cells_new(1, 2, 0);

                               ce = new CCells;  ce->get_ellipt_arc(a, b, -M_PI, M_PI);
                               cont->sm->B[cont->sm->N-1].bar->bar_add(ce);
                               cont->sm->B[cont->sm->N-1].bar->bar_ord();

                               P0[0] = D*.5;
                               P0[1] = 0.;
                               cont->sm->B[cont->sm->N-1].bar->cells_iso(P0, M_PI_2);
                               cont->sm->B[cont->sm->N-1].bar->cells_iso(NULL, f0);
                          }
                     }
							cont->sm->link[num+2] = cont->sm->N;

////////////////////////////////////////////////////////////////
//...Ó„Ë·‡˛˘‡ˇ ‚ÒÂÈ „ÂÓÏÂÚËË -- ÓÍÛÊÌÓÒÚ¸ ÔÓÒÎÂ‰ÌÂ„Ó ‰Ë‡ÏÂÚ‡;
                     cont->sm->bar = new CCells;
                     ((CCells *)cont->sm->bar)->get_circle_profile((D+diam)*.5);
                  }
/////////////////////////////
//...ÔÂÂÛÒÚ‡Ì‡‚ÎË‚‡ÂÏ ‡ÏÍÛ;
                  cont->left   = -(cont->right = (D+diam)*.5);
                  cont->bottom = -(cont->top   = (D+diam)*.5); 
     }            break;
  }

/////////////////////////////////////////
//...ÚÂÒÚÓ‚‡ˇ ÔÂ˜‡Ú¸ ˜ËÒÎ‡ ÚÓ˜ÂÍ ‚ ÒÎÓˇı;
  int id_debug = 0;
  if (id_debug) {
		int NW1 = 1, NW2 = 0, i;
		for (i = 1; i <= cont->sm->link[0]; i++)
		for (k = cont->sm->link[i+1]; k < cont->sm->link[i+2]; k++) NW1++;
		for (; i <= cont->sm->link[1]; i++)
		for (k = cont->sm->link[i+1]; k < cont->sm->link[i+2]; k++) NW2++;
		char buf[2000];
		sprintf(buf, "N_wire = (%d, %d) <==> (%s)", NW1, NW2, N_wire);
		Message(buf);
  }
  return(cont->sm != NULL);
}
#endif

/*
//////////////////////////////////////////////////////////////////////
//...pÂ¯‡ÚÂÎ¸ ÙÛÌÍˆËÈ ÙÓpÏ˚ ‰Îˇ 2D Ó·‡Áˆ‡ (Á‡‰‡˜Ë ÔÓ„‡ÌË˜ÌÓ„Ó ÒÎÓˇ);
int wire2D_solv(void * context, int & sec, int & hund, int id_solv)
{
    Context  * cont = (Context *)context; sec = hund = 0;
    if ((is_Skin2D(cont) || is_SkGp3D(cont) || is_SkIb3D(cont)) && cont->sm && ! cont->sm->solv) {
        CSample * sm = cont->sm;

///////////////////////////
//...solving of the probem;
        clock_t start = clock();
        int  counting = (cont->N == _NUM_SK2D_SAMPLES-1+SHIFT_SK2D_SAMPLES ? 
                         ANALYTICAL_COUNTING : 
                             BASIC_COUNTING);

        if (sm->counting_kernel(counting) != OK_COUNTING) {
            Message("Error in sample counting...");

            if (sm->solver)
                sm->solver->release_matrix();

            return(0);
        }
        Message("O'K");
        if (id_solv & MASK9) cont->sm->solv = 1;

////////////////////////////////////////////
//...ÙËÍÒËÛÂÏ ‚ÂÏˇ Ë ‚˚ıÓ‰ËÏ ËÁ ÔÓ„‡ÏÏ˚;
        timing_process(start, & hund, & sec);
    }
    return(1);
}

//////////////////////////////////////////////////////////
//...ÂÁÛÎ¸Ú‡Ú˚ ‰Îˇ 2D Ó·‡Áˆ‡ (Á‡‰‡˜Ë ÔÓ„‡ÌË˜ÌÓ„Ó ÒÎÓˇ);
char * GetFuncWIREName(int num)
{ static char *L[]={ "Full displacement",    //_FWIRE1
                     "Classic displacement", //_FWIRE2
                     "Full normal stress",   //_FWIRE3
                     "Classic normal stress",//_FWIRE4
                     "Full shear stress",    //_FWIRE5
                     "Classic shear stress"  //_FWIRE6
                   };
  return L[num];
}
/*
void solver_Wire(void * context, CGrid * nd, double * F, double * par, int id_F)
{
  Context * cont = (Context *)context;
  if (cont && cont->sm && nd && F) {
      int id_block, l;

////////////////////////////////////
//...Ó·p‡·‡Ú˚‚‡ÂÏ ‚ÒÂ ‚ıÓ‰Ì˚Â ÚÓ˜ÍË;
      if (nd->X && nd->Y && cont->sm->B)
      for (l = 0; l < nd->N; l++) {
           if (nd->hit) id_block = nd->hit[l];
           else         id_block = -1;
//////////////////////////////////
//...search for appropriate block;
           if (id_block < 0 && Sph3D_struc_in(cont->sm, id_block, nd->X[l], nd->Y[l], 0.) &&
               cont->sm->B[id_block].link && par  &&
               cont->sm->B[id_block].link[0] == 6 && cont->sm->bar && 
             ((CCeDemo *) cont->sm->bar)->in_test_inclusion2D(nd->X[l], nd->Y[l], par) != -cont->sm->B[id_block].link[5])
               id_block = cont->sm->B[id_block].link[6];
//////////////////////
//...data calculation;
           if (id_block >= 0 && id_block < cont->sm->N) {
               double FF[3] = {0., 0., 0.};
               switch (id_F) {
                      case _FK1: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 2);
                            F[l] = FF[0];
                            break;
                      case _FK2: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 0);
                            F[l] = FF[0];
                            break;
                      case _FK3: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 5);
                            F[l] = FF[0];
                            break;
                      case _FK4: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 3);
                            F[l] = FF[0];
                            break;
                      case _FK5: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 5);
                            F[l] = FF[1];
                            break;
                      case _FK6: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 3);
                            F[l] = FF[1];
                            break;
                      case _NUM_SK_FUNCTIONS: 
                            F[l] = id_block;
                      default:
                            F[l] = 0.;
               }
           }
           if (nd->hit) nd->hit[l] = id_block;
      }
  }
}
*/

/////////////////////////////////////////////////////////////////
//...ËÌÚÂÙÂÈÒÌ˚Â ÙÛÌÍˆËË ‰Îˇ ‚Á‡ËÏÓ‰ÂÈÒÚ‚Ëˇ Ò ‚ÌÂ¯ÌËÏË ÏÓ‰ÛÎˇÏË;
#ifndef ___ABRIDGE_PROFILE_MODE___
double get_full_square(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double S = sm ? sm->get_full_square() : MAX_HIT;
   SetSample(context, sm);
   return S;
}
double get_square(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double S = sm ? sm->get_square() : MAX_HIT;
   SetSample(context, sm);
   return S;
}
double get_inertia_Y(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double I = sm ? sm->get_inertia_Y() : MAX_HIT;
   SetSample(context, sm);
   return I;
}
double get_inertia_Z(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double I = sm ? sm->get_inertia_Z() : MAX_HIT;
   SetSample(context, sm);
   return I;
}
double get_inertia_YZ(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double I = sm ? sm->get_inertia_YZ() : MAX_HIT;
   SetSample(context, sm);
   return I;
}
double get_static_Y(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double I = sm ? sm->get_static_Y() : MAX_HIT;
   SetSample(context, sm);
   return I;
}
double get_static_Z(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double I = sm ? sm->get_static_Z() : MAX_HIT;
   SetSample(context, sm);
   return I;
}
double get_torsion_J(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double J = sm ? sm->get_torsion_J() : MAX_HIT;
   SetSample(context, sm);
   return J;
}
double get_effect_max_E(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double E = sm ? sm->get_effect_max_E() : MAX_HIT;
   SetSample(context, sm);
   return E;
}
double get_effect_min_E(void * context)
{
   if (! context) return(0.);

   CWire2D * sm = (CWire2D *)((Context *)context)->sm;
   Table  * tab = ((Context *)context)->table; 

   double E = 0, H_tw, E0, nju0;
   if (! sm || ! tab || ! sm->B || ! sm->link) return(E);

   char * H_twist;
   H_twist  = ((char  **)tab->table[3].parm_values)[tab->index];

   char buf[200];
   unsigned long count1 = 0, upper1 = (unsigned long)user_strlen(H_twist);

   double par[5] = {0., 0., 0., 0., 0.}, S0, tg2, D;
   int k, i;
   
   E0 = sm->get_param(3);
   nju0 = sm->get_param(4);

//////////////////////
//...ÒÂ‰Â˜ÌËÍ Í‡·ÂÎˇ;
   sm->get_wire_param(sm->B[0].bar, par);
   S0 = M_PI*par[3]*par[4];
   E = E0*S0;

///////////////////
//...ˆËÍÎ ÔÓ ÒÎÓˇÏ;
   for (i = 1; i <= sm->link[0]; i++) {
      if (user_Read (buf, H_twist, count1, upper1)) H_tw = user_strtod(buf);
      tg2 = sqr(M_PI/H_tw);
      for (k = sm->link[i+1]; k < sm->link[i+2]; k++) {
         sm->get_wire_param(sm->B[k].bar, par);
         S0 = M_PI*par[3]*par[4];
         D  = 2.*(par[0]*par[0]+par[1]*par[1])/(par[4]*par[4]);
         E += E0*S0*sqrt(1.+tg2)/((1.+2.*(1.+nju0)*tg2)*(1.+D)+D);
      }
   }
   E0 = sm->get_param(6);
   nju0 = sm->get_param(7);
   for (; i <= sm->link[1]; i++) {
      if (user_Read (buf, H_twist, count1, upper1)) H_tw = user_strtod(buf);
      tg2 = sqr(M_PI/H_tw);
      for (k = sm->link[i+1]; k < sm->link[i+2]; k++) {
         sm->get_wire_param(sm->B[k].bar, par);
         S0 = M_PI*par[3]*par[4];
         D  = 2.*(par[0]*par[0]+par[1]*par[1])/(par[4]*par[4]);
         E += E0*S0*sqrt(1.+tg2)/((1.+2.*(1.+nju0)*tg2)*(1.+D)+D);
      }
   }
   return(E/sm->get_square());
}
double get_effect_max_At(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double At = sm ? sm->get_effect_max_At() : MAX_HIT;
   SetSample(context, sm);
   return At;
}
double get_E_core(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double nju = sm ? sm->get_param(3) : MAX_HIT;
   SetSample(context, sm);
   return nju;
}
double get_E_wire(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double nju = sm ? sm->get_param(6) : MAX_HIT;
   SetSample(context, sm);
   return nju;
}
double get_nju_core(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double nju = sm ? sm->get_param(4) : MAX_HIT;
   SetSample(context, sm);
   return nju;
}
double get_nju_wire(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double nju = sm ? sm->get_param(7) : MAX_HIT;
   SetSample(context, sm);
   return nju;
}
double get_diameter(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double Diam = sm ? sm->get_diameter() : MAX_HIT;
   SetSample(context, sm);
   return Diam;
}
double get_last_diameter(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double Diam = sm ? sm->get_last_diameter() : MAX_HIT;
   SetSample(context, sm);
   return Diam;
}
double get_diameter(void * context, int layer)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double Diam = sm ? sm->get_diameter(layer) : MAX_HIT;
   SetSample(context, sm);
   return Diam;
}
int get_last_num_layer(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   int num_layer = sm ? sm->get_last_num_layer() : 0;
   SetSample(context, sm);
   return num_layer;
}
int get_num_layer(void * context, int layer)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   int num_layer = sm ? sm->get_num_layer(layer) : 0;
   SetSample(context, sm);
   return num_layer;
}
double get_last_twist_angle(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double alpha = sm ? sm->get_last_twist_angle() : MAX_HIT;
   SetSample(context, sm);
   return alpha;
}
double get_twist_angle(void * context, int layer)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double alpha = sm ? sm->get_twist_angle(layer) : MAX_HIT;
   SetSample(context, sm);
   return alpha;
}
double get_effect_EI(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double EI = sm ? sm->get_effect_EI() : MAX_HIT;
   SetSample(context, sm);
   return EI;
}
double get_effect_GJ(void * context)
{
   CWire2D * sm = (CWire2D *)GetSample(context);
   double GJ = sm ? sm->get_effect_GJ() : MAX_HIT;
   SetSample(context, sm);
   return GJ;
}
#endif
#endif
#undef  Message
