#include "stdafx.h"

#include "cprofile.h"
#include "cpro_bars.h"

#include "ccebars.h"
#include "cbars25.h"

#include "unit_mes.h"
#include "lib_tb.h"

#ifdef ___WINDOWS_LOG_MESSAGE___
#include "..\vc2d\externs.h"
#define  Message(Msg)    theMainFrame->Message(Msg)
#else
//#define  Message(Msg)    printf(Msg);  printf("\n")
#endif

#ifdef ___PRO_BARS2D_cpp___
///////////////////////////////////////////////////////////////
//...число 2D статических образцов-сечений из ГОСТА и их имена;
int GetBARSGOSTSampleCount(void) { return(NUM_BARS_GOST_SAMPLES); }
char	* GetBARSGOSTSampleName (int N_sm)
{
  static char * S[] = { "Равнополочные уголки",             //_LU_GOST
                        "Неравнополочные уголки",           //_LN_GOST
                        "Двутавры",									//_IU_GOST
                        "Швеллеры",									//_SU_GOST
                        "Гнутые равнополочные уголки",      //_LGUGOST
                        "Гнутые неравнополочные уголки",    //_LGNGOST
                        "Гнутые швеллеры",						//_SGUGOST
                        "Рельсы крановые",						//_RC_GOST
  };
  return S[N_sm];
}
char * GetBARSGOSTName (int N_sm)
{
  static char * S[] = { "ГОСТ 8509-93",					//_LU_GOST
                        "ГОСТ 8510-86",					//_LN_GOST
                        "ГОСТ 8239-89",					//_IU_GOST
                        "ГОСТ 8240-89",					//_SU_GOST
                        "ГОСТ 19771-93",					//_LGUGOST
                        "ГОСТ 19772-93",					//_LGNGOST
                        "ГОСТ 8278-83",					//_SGUGOST
                        "ГОСТ 4121-76 в ред. 1991г.",	//_RC_GOST
  };
  return S[N_sm];
}

/*============================================================*/
/*                 ТАБЛИЦЫ ПРОФИЛЕЙ ПО ГОСТУ                  */
/*============================================================*/
///////////////////////////////////////////////////
//...шаблон таблиц для базы данных госта по уголкам;
Table * GetGOSTDataBaseTable(int N_group, char * table_names[], int id_static_char)
{
	Shablon records[] = {{	  DLENGTH_TYPE_RECORD, "A1"},		 //(0) -- A1
								{	  DLENGTH_TYPE_RECORD, "A2"},		 //(1) -- A2/(A2 = A1 для равнополочного уголка);
								{	  DLENGTH_TYPE_RECORD, "B1"},		 //(2) -- B1
								{	  DLENGTH_TYPE_RECORD, "B2"},		 //(3) -- B2/(B2 = B1 для равнополочного и неравнополочного уголка);
								{	  DLENGTH_TYPE_RECORD, "R"},		 //(4) -- R
								{	  DLENGTH_TYPE_RECORD, "r"},		 //(5) -- r
								{	  DSQUARE_TYPE_RECORD, "S"},		 //(6) -- S
								{		 DMASS_TYPE_RECORD, "M"},		 //(7) -- M
								{   DINERTIA_TYPE_RECORD, "Jx"},		 //(8) -- Jx
								{DRESISTANCE_TYPE_RECORD, "Wx"},		 //(9) -- Wx
								{	  DLENGTH_TYPE_RECORD, "ix"},		 //(10) -- ix
								{	 DINERTIA_TYPE_RECORD, "Jy/Jmax"},//(11) -- Jy/Jmax
								{DRESISTANCE_TYPE_RECORD, "Wy"},     //(12) -- Wy
								{	  DLENGTH_TYPE_RECORD, "iy/imax"},//(13) -- iy/imax
								{	 DINERTIA_TYPE_RECORD, "Jxy"},    //(14) -- Jxy
								{	  DLENGTH_TYPE_RECORD, "X0/Z0"},  //(15) -- X0/Z0
								{	  DLENGTH_TYPE_RECORD, "Y0/r1"},  //(16) -- Y0/(Y0 = r1 для не параллельного швеллера)
								{	   DOUBLE_TYPE_RECORD, "tg"},     //(17) -- tg_alpha
								{	 DINERTIA_TYPE_RECORD, "Jmin"},   //(18) -- Jmin
								{DRESISTANCE_TYPE_RECORD, "W/Sx"},	 //(19) -- W/(W = Sx для не параллельного швеллера)
								{	  DLENGTH_TYPE_RECORD, "imin"},   //(20) -- imin
	};
	Table * table = get_shablon_table(21, N_group, records, table_names, id_static_char);
	return  table;
}

////////////////////////////////////////////////////////////
//...таблицы равнополочных уголков по ГОСТУ (в системе CGS);
Table * gost_LU(int id_static_char)
{
	static double A  [] = { 0.,  2.0,  2.0,  2.5,  2.5,  2.5,  2.8,  3.0,  3.0,  3.0,  3.2,
										  3.2,  3.5,  3.5,  3.5,  4.0,  4.0,  4.0,  4.0,  4.5,  4.5,
										  4.5,  4.5,  5.0,  5.0,  5.0,  5.0,  5.0,  5.0,  5.6,  5.6,
										  6.0,  6.0,  6.0,  6.0,  6.0,  6.3,  6.3,  6.3,  7.0,  7.0,
										  7.0,  7.0,  7.0,  7.0,  7.5,  7.5,  7.5,  7.5,  7.5,  8.0,
										  8.0,  8.0,  8.0,  8.0,  8.0,  9.0,  9.0,  9.0,  9.0,  9.0,
										  9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0,
										 11.0, 12.0, 12.0, 12.0, 12.0, 12.5, 12.5, 12.5, 12.5, 12.5,
										 12.5, 14.0, 14.0, 14.0};
	static double B  [] = { 0.,  .3,  .4,  .3,  .4,  .5,  .3,  .3,  .4,  .5,  .3,
										  .4,  .3,  .4,  .5,  .3,  .4,  .5,  .6,  .3,  .4,
										  .5,  .6,  .3,  .4,  .5,  .6,  .7,  .8,  .4,  .5,
										  .4,  .5,  .6,  .8, 1.0,  .4,  .5,  .6,  .45, .5,
										  .6,  .7,  .8, 1.0,  .5,  .6,  .7,  .8,  .9,  .55,
										  .6,  .7,  .8, 1.0, 1.2,  .6,  .7,  .8,  .9, 1.0,  
										 1.2,  .65, .7,  .8, 1.0, 1.2, 1.4, 1.5, 1.6,  .7,   
										  .8,  .8, 1.0, 1.2, 1.5,  .8,  .9, 1.0, 1.2, 1.4,  
										 1.6,  .9, 1.0, 1.2};
	static double R  [] = { 0., .35, .35, .35, .35, .35, .40, .40, .40, .40, .45,
										 .45, .45, .45, .45, .50, .50, .50, .50, .50, .50,
										 .50, .50, .55, .55, .55, .55, .55, .55, .60, .60,
										 .70, .70, .70, .70, .70, .70, .70, .70, .80, .80,
										 .80, .80, .80, .80, .90, .90, .90, .90, .90, .90,
										 .90, .90, .90, .90, .90, 1.0, 1.0, 1.0, 1.0, 1.0,
										 1.0, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2,
										 1.2, 1.2, 1.2, 1.2, 1.2, 1.4, 1.4, 1.4, 1.4, 1.4,
										 1.4, 1.4, 1.4, 1.4};
	static double r  [] = { 0., .12, .12, .12, .12, .12, .13, .13, .13, .13, .15,
										 .15, .15, .15, .15, .17, .17, .17, .17, .17, .17,
										 .17, .17, .18, .18, .18, .18, .18, .18, .20, .20,
										 .23, .23, .23, .23, .23, .23, .23, .23, .27, .27,
										 .27, .27, .27, .27, .30, .30, .30, .30, .30, .30,
										 .30, .30, .30, .30, .30, .33, .33, .33, .33, .33,
										 .33, .40, .40, .40, .40, .40, .40, .40, .40, .40,
										 .40, .40, .40, .40, .40, .46, .46, .46, .46, .46,
										 .46, .46, .46, .46};
	static double S  [] = { 0., 1.13,  1.46,  1.43,  1.86,  2.27,  1.62,  1.74,  2.27,  2.78,  1.86,
										 2.43,  2.04,  2.17,  3.28,  2.35,  3.08,  3.79,  4.48,  2.65,  3.48,
										 4.29,  5.08,  2.96,  3.89,  4.80,  5.69,  6.56,  7.41,  4.38,  5.41,
										 4.72,  5.83,  6.92,  9.04, 11.08,  4.96,  6.13,  7.28,  6.20,  6.86,
										 8.15,  9.42, 10.67, 13.11,  7.39,  8.78, 10.15, 11.50, 12.83,  8.63,
										 9.38, 10.85, 12.30, 15.14, 17.90, 10.61, 12.28, 13.93, 15.60, 17.17,
										20.33, 12.82, 13.75, 15.60, 19.24, 22.80, 26.28, 27.99, 29.68, 15.15,
										17.20, 18.80, 23.24, 27.60, 33.99, 19.69, 22.00, 24.33, 28.89, 33.37,
										37.77, 24.72, 27.33, 32.49};
	static double M  [] = { 0., 0.89,  1.15,  1.12,  1.46,  1.78,  1.27,  1.36,  1.78,  2.18,  1.46,
										 1.91,  1.60,  2.10,  2.58,  1.85,  2.42,  2.98,  3.52,  2.08,  2.73,
										 3.37,  3.99,  2.32,  3.05,  3.77,  4.47,  5.15,  5.82,  3.44,  4.25,
										 3.71,  4.58,  5.43,  7.10,  8.70,  3.90,  4.81,  5.72,  4.87,  5.38,
										 6.39,  7.39,  8.37, 10.29,  5.80,  6.89,  7.96,  9.02, 10.07,  6.78,
										 7.36,  8.51,  9.65, 11.88, 14.05,  8.33,  9.64, 10.93, 12.20, 13.48,
										15.96, 10.06, 10.79, 12.25, 15.10, 17.90, 20.63, 21.97, 23.30, 11.89,
										13.50, 14.76, 18.24, 21.67, 26.68, 15.46, 17.30, 19.10, 22.68, 26.20,
										29.65, 19.41, 21.45, 25.50};
	static double Jx [] = { 0.,  0.40,   0.50,   0.81,   1.03,   1.22,   1.16,   1.45,   1.84,   2.20,   1.77,
										  2.26,   2.35,   3.01,   3.61,   3.55,   4.58,   5.53,   6.41,   5.13,   6.63,
										  8.03,   9.35,   7.11,   9.21,  11.20,  13.07,  14.84,  16.51,  13.10,  15.97,
										 16.21,  19.79,  23.21,  29.55,  35.32,  18.86,  23.10,  27.06,  29.04,  31.94,
										 37.58,  42.98,  48.16,  57.90,  39.53,  46.57,  53.34,  59.84,  66.10,  52.68,
										 56.97,  65.31,  73.36,  83.58, 102.74,  82.10,  94.30, 106.11, 118.00, 128.60,
										149.67, 122.10, 130.59, 147.19, 178.95, 208.90, 237.15, 250.68, 263.82, 175.61,
										198.17, 259.75, 317.16, 371.80, 448.90, 294.36, 327.48, 359.82, 422.23, 481.76,
										538.56, 465.72, 512.29, 602.49};
	static double Wx [] = { 0., 0.28,  0.37,  0.46,  0.59,  0.71,  0.58,  0.67,  0.87,  1.06,  0.77,
										 1.00,  0.93,  1.21,  1.47,  1.22,  1.60,  1.95,  2.30,  1.56,  2.04,
										 2.51,  2.95,  1.94,  2.54,  3.13,  3.69,  4.23,  4.76,  3.21,  3.96,
										 3.70,  4.56,  5.40,  7.00,  8.52,  4.09,  5.05,  5.98,  5.67,  6.27,
										 7.43,  8.57,  9.68, 11.82,  7.21,  8.57,  9.89, 11.18, 12.43,  9.03,
										 9.80, 11.32, 12.80, 15.67, 18.42, 12.49, 14.45, 16.36, 18.29, 20.07,
										23.85, 16.69, 17.90, 20.30, 24.97, 29.47, 33.83, 35.95, 38.04, 21.83,
										24.77, 29.68, 36.59, 43.30, 52.96, 32.20, 36.00, 39.74, 47.06, 54.17,
										61.09, 45.55, 50.32, 59.66};
	static double ix [] = { 0., 0.59, 0.58, 0.75, 0.74, 0.73, 0.85, 0.91, 0.80, 0.89, 0.97,
										 0.96, 1.07, 1.06, 1.05, 1.23, 1.22, 1.21, 1.20, 1.39, 1.38,
										 1.37, 1.36, 1.55, 1.54, 1.53, 1.52, 1.50, 1.49, 1.73, 1.72,
										 1.85, 1.84, 1.83, 1.81, 1.79, 1.95, 1.94, 1.93, 2.16, 2.16,
										 2.15, 2.14, 2.12, 2.10, 2.31, 2.30, 2.29, 2.28, 2.27, 2.47,
										 2.47, 2.45, 2.44, 2.42, 2.40, 2.78, 2.77, 2.76, 2.75, 2.74,
										 2.71, 3.09, 3.08, 3.07, 3.05, 3.03, 3.00, 2.99, 2.98, 3.40,
										 3.39, 3.72, 3.69, 3.67, 3.63, 3.87, 3.86, 3.85, 3.82, 3.80,
										 3.78, 4.34, 4.33, 4.31};
	static double Jmx[] = { 0.,  0.63,   0.78,   1.29,   1.62,   1.91,   1.84,   2.30,   2.92,   3.47,	  2.80,   
										  3.58,   3.72,   4.76,   5.71,   5.63,   7.26,   8.75,  10.13,   8.13,  10.52,  
										 12.74,  14.80,  11.27,  14.63,  17.77,  20.72,  23.47,  26.03,  20.79,	 25.36,  
										 25.69,  31.40,  36.81,  46.77,  55.64,  29.90,  36.80,  42.91,  46.03,	 50.67,  
										 59.64,  68.19,  76.35,  91.52,  62.65,  73.87,  84.61,  94.89, 104.72,	 83.56,  
										 90.40, 103.60, 116.39, 140.31, 162.27, 130.00, 149.67, 168.42, 186.00,	203.93, 
										235.88, 193.46, 207.01, 233.46, 283.83, 330.95, 374.98, 395.87, 416.04,	278.54, 
										314.51, 412.45, 503.79, 590.28, 711.32, 466.76, 520.00, 571.04, 670.02,	763.90, 
										852.84, 739.42, 813.62, 956.98};
	static double W  [] = { 0., 0.20,  0.24,  0.33,  0.41,  0.47,  0.42,  0.53,  0.61,  0.71,  0.59,
										 0.71,  0.71,  0.88,  1.02,  0.95,  1.19,  1.39,  1.58,  1.24,  1.54,
										 1.81,  2.06,  1.57,  1.95,  2.30,  2.63,  2.93,  3.22,  2.52,  2.97,
										 2.93,  3.49,  3.99,  4.90,  5.70,  3.26,  3.87,  4.44,  4.53,  4.92,
										 5.66,  6.31,  6.99,  8.17,  5.74,  6.62,  7.43,  8.16,  8.91,  7.10,
										 7.60,  8.55,  9.44, 11.09, 12.62,  9.88, 11.15, 12.34, 13.48, 14.54,
										16.53, 13.38, 14.13, 15.66, 18.51, 21.10, 23.49, 24.62, 25.79, 17.36,
										19.29, 23.29, 27.72, 31.79, 37.35, 25.67, 28.26, 30.45, 34.94, 39.10,
										43.10, 35.92, 39.05, 44.97};
	static double imx[] = { 0., 0.75,  0.73,  0.95,  0.93,  0.92,  1.07,  1.15,  1.13,  1.12,  1.23,
										 1.21,  1.35,  1.33,  1.32,  1.55,  1.53,  1.52,  1.50,  1.75,  1.74,
										 1.72,  1.71,  1.95,  1.94,  1.92,  1.91,  1.89,  1.87,  2.18,  2.16,
										 2.33,  2.32,  2.31,  2.27,  2.24,  2.45,  2.44,  2.43,  2.72,  2.72,
										 2.71,  2.69,  2.68,  2.64,  2.91,  2.90,  2.89,  2.87,  2.86,  3.11,
										 3.11,  3.09,  3.08,  3.04,  3.01,  3.50,  3.49,  3.48,  3.46,  3.45,
										 3.41,  3.89,  3.88,  3.87,  3.84,  3.81,  3.78,  3.76,  3.74,  4.29,
										 4.28,  4.68,  4.66,  4.62,  4.57,  4.87,  4.86,  4.84,  4.82,  4.78,
										 4.75,  5.47,  5.46,  5.43};
	static double Jxy[] = { 0.,  0.23,   0.28,   0.47,   0.59,   0.69,   0.68,   0.85,   1.08,   1.27,   1.03,
										  1.32,   1.37,   1.75,   2.10,   2.08,   2.68,   3.22,   3.72,   3.00,   3.89,
										  4.71,   5.45,   4.16,   5.42,   6.57,   7.65,   8.63,   9.52,   7.69,   9.41,
										  9.48,  11.61,  13.60,  17.22,  20.32,  11.00,  13.70,  15.90,  17.00,  18.70,
										 22.10,  25.20,  28.20,  33.60,  23.10,  27.30,  31.20,  35.00,  38.60,  30.90,
										 33.40,  38.30,  43.00,  56.70,  59.50,  48.10,  55.40,  62.30,  68.00,  75.30,
										 86.20,  71.40,  76.40,  86.30, 110.00, 122.00, 138.00, 145.00, 152.00, 106.00,
										116.00, 153.00, 187.00, 218.00, 262.00, 172.00, 192.00, 211.00, 248.00, 282.00,
										315.00, 274.00, 301.00, 354.00};
	static double Z0 [] = { 0., 0.60,  0.64,  0.73,  0.76,  0.80,  0.80,  0.85,  0.89,  0.93,  0.89,
										 0.94,  0.97,  1.01,  1.05,  1.09,  1.13,  1.17,  1.21,  1.21,  1.26,
										 1.30,  1.34,  1.33,  1.38,  1.42,  1.46,  1.50,  1.53,  1.52,  1.57,
										 1.62,  1.66,  1.70,  1.78,  1.85,  1.69,  1.74,  1.78,  1.88,  1.90,
										 1.94,  1.99,  2.02,  2.10,  2.02,  2.06,  2.10,  2.15,  2.18,  2.17,
										 2.19,  2.23,  2.27,  2.35,  2.42,  2.43,  2.47,  2.51,  2.55,  2.59,
										 2.67,  2.68,  2.71,  2.75,  2.83,  2.91,  2.99,  3.03,  3.06,  2.96,
										 3.00,  3.25,  3.33,  3.41,  3.53,  3.36,  3.40,  3.45,  3.53,  3.61,
										 3.68,  3.76,  3.82,  3.90};
	static double Jmn[] = { 0.,  0.17,   0.22,   0.34,   0.44,   0.53,   0.48,   0.60,   0.77,   0.94,   0.74,
										  0.94,   0.97,   1.25,   1.52,   1.47,   1.90,   2.30,   2.70,   2.12,   2.74,
										  3.33,   3.90,   2.95,   3.80,   4.63,   5.43,   6.21,   6.98,   5.21,   6.59,
										  6.72,   8.18,   9.60,  12.34,  15.00,   7.81,   9.52,  11.18,  12.04,  13.22,
										 15.52,  17.77,  19.97,  24.27,  16.41,  19.28,  22.07,  24.80,  27.48,  21.80,
										 23.54,  26.97,  30.32,  36.85,  43.21,  33.97,  38.94,  43.80,  48.60,  53.27,
										 62.40,  50.73,  54.16,  60.92,  74.08,  86.84,  99.32, 105.48, 111.61,  72.68,
										 81.83, 107.04, 130.54, 153.33, 186.48, 121.98, 135.88, 148.59, 174.43, 199.62,
										224.29, 192.03, 210.96, 248.01};
	static double imn[] = { 0., 0.39,  0.38,  0.49,  0.48,  0.48,  0.55,  0.59,  0.58,  0.58,  0.63,
										 0.62,  0.69,  0.68,  0.68,  0.79,  0.78,  0.78,  0.78,  0.89,  0.89,
										 0.88,  0.88,  1.00,  0.99,  0.98,  0.98,  0.97,  0.97,  1.11,  1.10,
										 1.19,  1.18,  1.18,  1.17,  1.16,  1.25,  1.25,  1.24,  1.39,  1.39,
										 1.38,  1.37,  1.37,  1.36,  1.49,  1.48,  1.47,  1.47,  1.46,  1.59,
										 1.58,  1.58,  1.57,  1.56,  1.55,  1.79,  1.78,  1.77,  1.77,  1.76,
										 1.75,  1.99,  1.98,  1.98,  1.96,  1.95,  1.94,  1.94,  1.94,  2.19,
										 2.18,  2.39,  2.37,  2.36,  2.34,  2.49,  2.48,  2.47,  2.46,  2.45,
										 2.44,  2.79,  2.78,  2.76};
	static double out[] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT};
	static char * S0 [] = { "2(3)",    "2(4)",   "2,5(3)","2,5(4)","2,5(5)","2,8(3)", "3(3)",   "3(4)",    "3(5)",    "3,2(3)", 
									"3,2(4)",  "3,5(3)", "3,5(4)","3,5(5)","4(3)",  "4(4)",   "4(5)",   "4(6)",    "4,5(3)",  "4,5(4)", 
									"4,5(5)",  "4,5(6)", "5(3)",  "5(4)",  "5(5)",  "5(6)",   "5(7)",   "5(8)",    "5,6(4)",  "5,6(5)", 
									"6(4)",    "6(5)",   "6(6)",  "6(8)",  "6(10)", "6,3(4)", "6,3(5)", "6,3(6)",  "7(4,5)",  "7(5)",    
									"7(6)",    "7(7)",   "7(8)",  "7(10)", "7,5(5)","7,5(6)", "7,5(7)", "7,5(8)",  "7,5(9)",  "8(5,5)",  
									"8(6)",    "8(7)",   "8(8)",  "8(10)", "8(12)", "9(6)",   "9(7)",   "9(8)",    "9(9)",    "9(10)",   
									"9(12)",   "10(6,5)","10(7)", "10(8)", "10(10)","10(12)", "10(14)", "10(15)",  "10(16)",  "11(7)",   
									"11(8)",   "12(8)",  "12(10)","12(12)","12(15)","12,5(8)","12,5(9)","12,5(10)","12,5(12)","12,5(14)",
									"12,5(16)","14(9)",  "14(10)","14(12)"};
	Table * table = GetGOSTDataBaseTable(84, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = A;
		table->table[1].parm_values = A;
		table->table[2].parm_values = B;
		table->table[3].parm_values = B;
		table->table[4].parm_values = R;
		table->table[5].parm_values = r;
		table->table[6].parm_values = S;
		table->table[7].parm_values = M;
		table->table[8].parm_values = Jx;
		table->table[9].parm_values = Wx;
		table->table[10].parm_values = ix;
		table->table[11].parm_values = Jmx;
		table->table[12].parm_values = out;
		table->table[13].parm_values = imx;
		table->table[14].parm_values = Jxy;
		table->table[15].parm_values = Z0;
		table->table[16].parm_values = out;
		table->table[17].parm_values = out;
		table->table[18].parm_values = Jmn;
		table->table[19].parm_values = W;
		table->table[20].parm_values = imn;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((double *)(table->table[0].parm_values))[k] = A[k];
		((double *)(table->table[1].parm_values))[k] = A[k];
		((double *)(table->table[2].parm_values))[k] = B[k];
		((double *)(table->table[3].parm_values))[k] = B[k];
		((double *)(table->table[4].parm_values))[k] = R[k];
		((double *)(table->table[5].parm_values))[k] = r[k];
		((double *)(table->table[6].parm_values))[k] = S[k];
		((double *)(table->table[7].parm_values))[k] = M[k];
		((double *)(table->table[8].parm_values))[k] = Jx[k];
		((double *)(table->table[9].parm_values))[k] = Wx[k]; 
		((double *)(table->table[10].parm_values))[k] = ix[k];
		((double *)(table->table[11].parm_values))[k] = Jmx[k];
		((double *)(table->table[12].parm_values))[k] = out[k]; 
		((double *)(table->table[13].parm_values))[k] = imx[k];
		((double *)(table->table[14].parm_values))[k] = Jxy[k];
		((double *)(table->table[15].parm_values))[k] = Z0[k];
		((double *)(table->table[16].parm_values))[k] = out[k];
		((double *)(table->table[17].parm_values))[k] = out[k];
		((double *)(table->table[18].parm_values))[k] = Jmn[k];
		((double *)(table->table[19].parm_values))[k] = W[k];
		((double *)(table->table[20].parm_values))[k] = imn[k];
	}
	return table;
}

//////////////////////////////////////////////////////////////
//...таблицы неравнополочных уголков по ГОСТУ (в системе CGS);
Table * gost_LN(int id_static_char)
{
	static double A1 [] = { 0.,  2.5,  3.0,  3.0,  3.2,  3.2,  4.0,  4.0,  4.0,  4.0,  4.0,
										  4.5,  4.5,  5.0,  5.0,  5.6,  5.6,  6.3,  6.3,  6.3,  6.3,
										  6.5,  6.5,  6.5,  6.5,  7.0,  7.5,  7.5,  7.5,  7.5,  8.0,
										  8.0,  8.0,  8.0,  8.0,  9.0,  9.0,  9.0, 10.0, 10.0, 10.0,
										 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 12.5, 12.5, 12.5, 12.5,
										 14.0, 14.0, 16.0, 16.0, 16.0, 16.0, 18.0, 18.0, 20.0, 20.0,
										 20.0, 20.0};
	static double A2 [] = { 0.,  1.6,  2.0,  2.0,  2.0,  2.0,  2.5,  2.5,  2.5,  3.0,  3.0,
										  2.8,  2.8,  3.2,  3.2,  3.6,  3.6,  4.0,  4.0,  4.0,  4.0,
										  5.0,  5.0,  5.0,  5.0,  4.5,  6.0,  6.0,  6.0,  6.0,  5.0,
										  5.0,  6.0,  6.0,  6.0,  5.6,  5.6,  5.6,  6.3,  6.3,  6.3,
										  6.3,  6.5,  6.5,  6.5,  7.0,  7.0,  8.0,  8.0,  8.0,  8.0,
										  9.0,  9.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 12.5, 12.5,
										 12.5, 12.5};
	static double B  [] = { 0.,  .3,  .3,  .4,  .3,  .4,  .3,  .4,  .5,  .4,  .5,
										  .3,  .4,  .3,  .4,  .4,  .5,  .4,  .5,  .6,  .8,
										  .5,  .6,  .7,  .8,  .5,  .5,  .6,  .7,  .8,  .5,
										  .6,  .6,  .7,  .8,  .55, .6,  .8,  .6,  .7,  .8,
										 1.0,  .7,  .8, 1.0,  .65, .8,  .7,  .8, 1.0, 1.2,
										  .8, 1.0,  .9, 1.0, 1.2, 1.4, 1.0, 1.2, 1.1, 1.2,  
										 1.4, 1.6};
	static double R  [] = { 0., .35, .35, .35, .35, .35, .40, .40, .40, .40, .40,
										 .50, .50, .55, .55, .60, .60, .70, .70, .70, .70,
										 .60, .60, .60, .60, .75, .80, .80, .80, .80, .80,
										 .80, .80, .80, .80, .90, .90, .90, 1.0, 1.0, 1.0,
										 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.1, 1.1, 1.1, 1.1,
										 1.2, 1.2, 1.3, 1.3, 1.3, 1.3, 1.4, 1.4, 1.4, 1.4,
										 1.4, 1.4};
	static double r  [] = { 0., .12, .12, .12, .12, .12, .13, .13, .13, .13, .13,
										 .17, .17, .18, .18, .20, .20, .23, .23, .23, .23,
										 .20, .20, .20, .20, .25, .27, .27, .27, .27, .27,
										 .27, .27, .27, .27, .30, .30, .30, .33, .33, .33,
										 .33, .33, .33, .33, .33, .33, .37, .37, .37, .37,
										 .40, .40, .43, .43, .43, .43, .47, .47, .47, .47,
										 .47, .47};
	static double S  [] = { 0., 1.16,  1.43,  1.86,  1.49,  1.94,  1.89,  2.47,  3.03,  2.67,  3.28,
										 2.14,  2.80,  2.42,  3.17,  3.58,  4.41,  4.04,  4.98,  5.90,  7.68,
										 5.56,  6.60,  7.62,  8.62,  5.59,  6.11,  7.25,  8.37,  9.47,  6.36,
										 7.55,  8.15,  9.42, 10.67,  7.86,  8.54, 11.18,  9.58, 11.09, 12.57,
										15.47, 11.23, 12.73, 15.67, 11.45, 13.93, 14.06, 15.98, 19.70, 23.36,
										18.00, 22.24, 22.87, 25.28, 30.04, 34.72, 28.33, 33.69, 34.87, 37.89,
										43.87, 49.77};
	static double M  [] = { 0., 0.91,  1.12,  1.46,  1.17,  1.52,  1.48,  1.94,  2.37,  2.26,  2.46,
										 1.68,  2.20,  1.90,  2.40,  2.81,  3.46,  3.17,  3.91,  4.63,  6.03,
										 4.36,  5.18,  5.98,  6.77,  4.39,  4.79,  5.69,  6.57,  7.43,  4.49,
										 5.92,  6.39,  7.39,  8.37,  6.17,  6.70,  8.77,  7.53,  8.70,  9.87,
										12.14,  8.81,  9.99, 12.30,  8.98, 10.93, 11.04, 12.58, 15.47, 18.34,
										14.13, 17.46, 17.96, 19.85, 23.58, 27.26, 22.20, 26.40, 27.37, 29.74,
										34.43, 39.07};
	static double Jx [] = { 0.,  0.70,   1.27,   1.61,   1.52,   1.93,   3.06,   3.93,   4.73,   4.18,   5.04,
										  4.41,   5.68,   6.18,   7.98,  11.37,  13.82,  16.33,  19.91,  23.31,  29.60,
										 23.41,  27.46,  31.32,  35.00,  27.76,  34.81,  40.92,  46.77,  52.38,  41.64,
										 48.98,  52.06,  59.61,  66.88,  65.28,  70.58,  90.87,  98.29, 112.86, 126.96,
										153.95, 114.05, 128.31, 155.52, 142.42, 171.54, 226.53, 225.62, 311.61, 364.79,
										363.68, 444.45, 605.97, 666.59, 784.22, 897.19, 952.28,1122.56,1449.02,1568.19,
									  1800.83,2026.08};
	static double Wx [] = { 0., 0.43,  0.62,  0.82,  0.72,  0.93,  1.14,  1.49,  1.82,  1.54,  1.88,
										 1.45,  1.90,  1.82,  2.38,  3.01,  3.70,  3.83,  4.72,  5.58,  7.22,
										 5.20,  6.16,  7.08,  7.99,  5.88,  6.81,  8.08,  9.31, 10.52,  7.71,
										 9.15,  9.42, 10.87, 12.38, 10.74, 11.66, 15.24, 14.52, 16.78, 19.01,
										23.32, 16.87, 19.11, 23.45, 19.11, 23.22, 26.67, 30.26, 37.27, 44.07, 
										38.25, 47.19, 56.04, 61.91, 73.42, 84.65, 78.59, 93.33,107.31,116.51,
									  134.64,152.41};
	static double ix [] = { 0., 0.78, 0.94, 0.93, 1.01, 1.00, 1.27, 1.26, 1.25, 1.25, 1.24,
										 1.48, 1.42, 1.60, 1.59, 1.78, 1.77, 2.01, 2.00, 1.99, 1.96,
										 2.05, 2.04, 2.03, 2.02, 2.23, 2.39, 2.38, 2.36, 2.35, 2.56,
										 2.55, 2.53, 2.52, 2.50, 2.88, 2.88, 2.85, 3.20, 3.19, 3.18,
										 3.15, 3.19, 3.18, 3.15, 3.53, 3.51, 4.01, 4.00, 3.98, 3.95, 
										 4.49, 4.47, 5.15, 5.13, 5.11, 5.08, 5.80, 5.77, 6.45, 6.43, 
										 6.41, 6.38};
	static double Jy [] = { 0.,  0.22,   0.45,   0.56,   0.46,   0.57,   0.93,   1.18,   1.41,   2.01,   2.41,
										  1.32,   1.69,   1.99,   2.56,   3.70,   4.48,   5.16,   6.26,   7.29,   9.15,
										 12.08,  14.12,  16.05,  18.88,   9.05,  12.47,  14.60,  16.61,  18.52,  12.68,
										 14.85,  25.18,  28.74,  32.15,  19.67,  21.22,  27.08,  30.58,  34.99,  39.21,
										 47.18,  38.32,  42.96,  51.68,  45.61,  54.64,  73.73,  80.95, 100.47, 116.84,
										119.79, 145.54, 186.03, 204.09, 238.75, 271.60, 276.37, 324.09, 446.36, 481.93,
										550.77, 616.66};
	static double Wy [] = { 0., 0.19,  0.30,  0.39,  0.30,  0.39,  0.49,  0.63,  0.77,  0.91,  1.11,
										 0.61,  0.80,  0.81,  1.05,  1.34,  1.65,  1.67,  2.05,  2.42,  3.12,
										 3.23,  3.82,  4.38,  4.93,  2.62,  3.25,  3.85,  4.43,  4.88,  3.28,
										 3.88,  5.58,  6.43,  7.26,  4.53,  4.91,  6.39,  6.27,  7.23,  8.17,
										 9.99,  7.70,  8.70, 10.64,  8.42, 10.20, 11.89, 13.47, 16.52, 19.46,
										17.19, 21.14, 23.96, 26.42, 31.23, 35.89, 32.27, 38.20, 45.98, 49.85,
										57.43, 64.83};
	static double iy [] = { 0., 0.44,  0.56,  0.55,  0.55,  0.54,  0.70,  0.69,  0.68,  0.87,  0.86,
										 0.79,  0.78,  0.91,  0.90,  1.02,  1.01,  1.13,  1.12,  1.11,  1.09,
										 1.47,  1.46,  1.45,  1.44,  1.27,  1.43,  1.42,  1.41,  1.40,  1.41,
										 1.40,  1.76,  1.75,  1.74,  1.58,  1.58,  1.56,  1.79,  1.78,  1.77,
										 1.75,  1.85,  1.84,  1.82,  2.00,  1.98,  2.29,  2.28,  2.26,  2.24,
										 2.58,  2.58,  2.85,  2.84,  2.82,  2.80,  3.12,  3.10,  3.58,  3.57,
										 3.54,  3.52};
	static double Jxy[] = { 0.,  0.22,   0.43,   0.54,   0.47,   0.59,   0.96,   1.22,   1.44,   1.68,   2.00,
										  1.38,   1.77,   2.01,   2.59,   3.74,   4.50,   5.25,   6.41,   7.44,   9.27,
										  9.77,  11.46,  12.94,  13.61,   9.12,  12.00,  14.10,  16.18,  17.80,  13.20,
										 15.50,  20.98,  24.01,  26.83,  20.54,  22.23,  28.33,  31.50,  36.10,  40.50,
										 48.60,  38.00,  42.64,  51.18,  46.80,  55.90,  74.70,  84.10, 102.00, 118.00,
										121.00, 147.00, 194.00, 213.00, 249.00, 282.00, 295.00, 348.00, 465.00, 503.00,
										575.00, 643.00};
	static double X0 [] = { 0., 0.42,  0.51,  0.54,  0.49,  0.53,  0.59,  0.63,  0.66,  0.78,  0.82,
										 0.64,  0.68,  0.72,  0.76,  0.84,  0.88,  0.91,  0.95,  0.99,  1.07,
										 1.26,  1.30,  1.34,  1.37,  1.05,  1.17,  1.21,  1.25,  1.29,  1.13,
										 1.17,  1.49,  1.53,  1.57,  1.26,  1.28,  1.36,  1.42,  1.46,  1.50,
										 1.58,  1.52,  1.56,  1.64,  1.58,  1.64,  1.80,  1.84,  1.92,  2.00,  
										 2.03,  2.12,  2.24,  2.28,  2.36,  2.43,  2.44,  2.52,  2.79,  2.83,  
										 2.91,  2.99};
	static double Y0 [] = { 0., 0.86,  1.00,  1.04,  1.08,  1.12,  1.32,  1.37,  1.41,  1.28,  1.32,
										 1.47,  1.51,  1.60,  1.65,  1.82,  1.87,  2.03,  2.08,  2.12,  2.20,
										 2.00,  2.04,  2.08,  2.12,  2.28,  2.39,  2.44,  2.48,  2.52,  2.60,
										 2.65,  2.47,  2.52,  2.56,  2.92,  2.95,  3.04,  3.23,  3.28,  3.32,
										 3.40,  3.24,  3.28,  3.37,  3.55,  3.61,  4.01,  4.05,  4.14,  4.22,
										 4.49,  4.58,  5.19,  5.23,  5.32,  5.40,  5.88,  5.97,  6.50,  6.54,
										 6.62,  6.71};
	static double tg [] = { 0., 0.392, 0.427, 0.421, 0.382, 0.374, 0.385, 0.281, 0.374, 0.544, 0.539,
										 0.382, 0.379, 0.403, 0.401, 0.406, 0.404, 0.397, 0.396, 0.393, 0.386,
										 0.576, 0.575, 0.571, 0.570, 0.406, 0.436, 0.435, 0.435, 0.430, 0.387, 
										 0.386, 0.547, 0.546, 0.544, 0.384, 0.384, 0.380, 0.393, 0.392, 0.391, 
										 0.387, 0.415, 0.414, 0.410, 0.402, 0.400, 0.407, 0.406, 0.404, 0.400, 
										 0.411, 0.409, 0.391, 0.390, 0.388, 0.385, 0.376, 0.374, 0.392, 0.392, 
										 0.390, 0.388};
	static double Jmn[] = { 0.,  0.13,   0.26,   0.34,   0.28,   0.35,   0.56,   0.71,   0.86,   1.09,	  1.33,   
										  0.79,   1.02,   1.18,   1.52,   2.19,   2.65,   3.07,   3.73,   4.36,   5.58,  
										  6.41,   7.52,   8.60,   9.65,   5.34,   7.24,   8.48,   9.69,  10.87,	  7.57,  
										  8.88,  13.61,  15.58,  17.49,  11.77,  12.70,  16.29,  18.20,  20.83,	 23.38,  
										 28.34,  22.77,  25.24,  30.60,  26.94,  32.31,  43.40,  48.82,  59.33,	 69.47,  
										 70.27,  85.51, 110.40, 121.16, 142.14, 162.49, 165.44, 194.28, 263.84,	285.04, 
										326.54, 366.99};
	static double W  [] = { 0., 0.16,  0.25,  0.32,  0.25,  0.33,  0.41,  0.52,  0.64,  0.75,  0.91,
										 0.52,  0.67,  0.68,  0.88,  1.13,  1.37,  1.41,  1.72,  2.02,  2.60,
										 2.68,  3.15,  3.59,  4.02,  2.20,  2.73,  3.21,  3.69,  4.14,  2.75,
										 3.24,  4.66,  5.34,  5.99,  3.81,  4.12,  5.32,  5.27,  6.06,  6.82,
										 8.31,  6.43,  7.26,  8.83,  7.05,  8.50,  9.96, 11.25, 13.74, 16.11, 
										14.39, 17.58, 20.01, 22.02, 25.93, 29.75, 26.96, 31.83, 38.27, 41.45,
									   47.57, 53.56};
	static double imn[] = { 0., 0.34,  0.43,  0.43,  0.43,  0.43,  0.54,  0.54,  0.53,  0.64,  0.64,
										 0.61,  0.60,  0.70,  0.69,  0.78,  0.78,  0.87,  0.86,  0.86,  0.85,
										 1.07,  1.07,  1.06,  1.06,  0.98,  1.09,  1.08,  1.08,  1.07,  1.00,
										 1.08,  1.29,  1.29,  1.28,  1.22,  1.22,  1.21,  1.38,  1.37,  1.36,
										 1.35,  1.41,  1.41,  1.40,  1.53,  1.52,  1.76,  1.75,  1.74,  1.72,
										 1.58,  1.96,  2.20,  2.19,  2.18,  2.16,  2.42,  2.40,  2.75,  2.74,
										 2.73,  2.72};
	static char * S0 [] = { "2,5/1,6(3)", "3/2(3)",     "3/2(4)",   "3,2/2(3)",  "3,2/2(4)",  "4/2,5(3)",  "4/2,5(4)",  "4/2,5(5)",  "4/3(4)",     "4/3(5)",
									"4,5/2,8(3)", "4,5/2,8(4)", "5/3,2(3)", "5/3,2(4)",  "5,6/3,6(4)","5,6/3,6(5)","6,3/4,0(4)","6,3/4,0(5)","6,3/4,0(6)", "6,3/4,0(8)",
									"6,5/5(5)",   "6,5/5(6)",   "6,5/5(7)", "6,5/5(8)",  "7/4,5(5)",  "7,5/5(5)",  "7,5/5(6)",  "7,5/5(7)",  "7,5/5(8)",   "8/5(5)",
									"8/5(6)",     "8/6(6)",     "8/6(7)",   "8/6(8)",    "9/5,6(5,5)","9/5,6(6)",  "9/5,6(8)",  "10/6,3(6)", "10/6,3(7)",  "10/6,3(8)",  
									"10/6,3(10)", "10/6,5(7)",  "10/6,5(8)","10/6,5(10)","11/7(6,5)", "11/7(8)",   "12,5/8(7)", "12,5/8(8)", "12,5/8(10)", "12,5/8(12)", 
									"14/9(8)",    "14/9(10)",   "16/10(9)", "16/10(10)", "16/10(12)", "16/10(14)", "18/11(10)", "18/11(12)", "20/12,5(11)","20/12,5(12)",
									"20/12,5(14)","20/12,5(16)"};
	Table * table = GetGOSTDataBaseTable(62, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = A1;
		table->table[1].parm_values = A2;
		table->table[2].parm_values = B;
		table->table[3].parm_values = B;
		table->table[4].parm_values = R;
		table->table[5].parm_values = r;
		table->table[6].parm_values = S;
		table->table[7].parm_values = M;
		table->table[8].parm_values = Jx;
		table->table[9].parm_values = Wx;
		table->table[10].parm_values = ix;
		table->table[11].parm_values = Jy;
		table->table[12].parm_values = Wy;
		table->table[13].parm_values = iy;
		table->table[14].parm_values = Jxy;
		table->table[15].parm_values = X0;
		table->table[16].parm_values = Y0;
		table->table[17].parm_values = tg;
		table->table[18].parm_values = Jmn;
		table->table[19].parm_values = W;
		table->table[20].parm_values = imn;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((double *)(table->table[0].parm_values))[k] = A1[k];
		((double *)(table->table[1].parm_values))[k] = A2[k];
		((double *)(table->table[2].parm_values))[k] = B[k];
		((double *)(table->table[3].parm_values))[k] = B[k];
		((double *)(table->table[4].parm_values))[k] = R[k];
		((double *)(table->table[5].parm_values))[k] = r[k];
		((double *)(table->table[6].parm_values))[k] = S[k];
		((double *)(table->table[7].parm_values))[k] = M[k];
		((double *)(table->table[8].parm_values))[k] = Jx[k];
		((double *)(table->table[9].parm_values))[k] = Wx[k]; 
		((double *)(table->table[10].parm_values))[k] = ix[k];
		((double *)(table->table[11].parm_values))[k] = Jy[k];
		((double *)(table->table[12].parm_values))[k] = Wy[k]; 
		((double *)(table->table[13].parm_values))[k] = iy[k];
		((double *)(table->table[14].parm_values))[k] = Jxy[k];
		((double *)(table->table[15].parm_values))[k] = X0[k];
		((double *)(table->table[16].parm_values))[k] = Y0[k];
		((double *)(table->table[17].parm_values))[k] = tg[k];
		((double *)(table->table[18].parm_values))[k] = Jmn[k];
		((double *)(table->table[19].parm_values))[k] = W[k];
		((double *)(table->table[20].parm_values))[k] = imn[k];
	}
	return table;
}

////////////////////////////////////////////////////
//...таблицы для двутавров по ГОСТУ (в системе CGS);
Table * gost_IU(int id_static_char)
{
	static double A1 [] = { 0., 10.0, 12.0, 14.0, 16.0, 18.0, 18.0, 20.0, 20.0, 22.0, 22.0,
										 24.0, 24.0, 27.0, 27.0, 30.0, 30.0, 33.0, 36.0, 40.0};
	static double A2 [] = { 0.,  5.5,  6.4,  7.3,  8.1,  9.0, 10.0, 10.0, 11.0, 11.0, 12.0,
										 11.5, 12.5, 12.5, 13.5, 13.5, 14.5, 14.0, 14.5, 15.5};
	static double B1 [] = { 0., .45, .48, .49, .50, .51, .51, .52, .52, .54, .54,
										 .56, .56, .60, .60, .65, .65, .70, .75, .83};
	static double B2 [] = { 0., .72, .73, .75,  .78,  .81,  .83,  .84,  .86,  .87,  .89,
										 .95, .98, .98, 1.02, 1.02, 1.07, 1.12, 1.23, 1.30};
	static double R  [] = { 0., .70,  .75,  .80,  .85,  .90,  .90,  .95,  .95, 1.00, 1.00,
										1.05, 1.05, 1.10, 1.10, 1.20, 1.20, 1.30, 1.40, 1.50};
	static double r  [] = { 0., .25, .30, .30, .35, .35, .35, .40, .40, .40, .40,
										 .40, .40, .45, .45, .50, .50, .50, .60, .60};
	static double S  [] = { 0., 12.0, 14.7, 17.4, 20.2, 23.4, 25.4, 26.8, 28.9, 30.6, 32.8,
										 34.8, 37.5, 40.2, 43.2, 46.5, 49.9, 53.8, 61.9, 72.6};
	static double M  [] = { 0., 9.46, 11.5, 13.7, 15.9, 18.4, 19.9, 21.0, 22.7, 24.0, 25.8,
										 27.3, 29.4, 31.5, 33.9, 36.5, 39.2, 42.2, 48.6, 57.0};
	static double Jx [] = { 0.,  198.,  350.,  572.,  873., 1290., 1430., 1840.,  2030.,  2550., 2790.,
										 3460., 3800., 5010., 5500., 7080., 7780., 9840., 13380., 19062.};
	static double Wx [] = { 0., 39.7, 58.4, 81.7, 109., 143., 159., 184., 203., 232., 254.,
										 289., 317., 371., 407., 472., 518., 597., 743., 953.};
	static double ix [] = { 0., 4.06, 4.88, 5.73, 6.57, 7.42, 7.51, 8.28, 8.37, 9.13, 9.22,
										 9.97, 10.1, 11.2, 11.3, 12.3, 12.5, 13.5, 14.7, 16.2};
	static double Sx [] = { 0., 23.0, 33.7, 46.8, 62.3, 81.4, 89.8, 104., 114., 131., 143.,
										 163., 178., 210., 229., 268., 292., 389., 423., 545.};
	static double Jy [] = { 0., 17.9, 27.9, 41.9, 58.6, 82.6, 114., 115., 155., 157., 206.,
										 198., 260., 260., 337., 337., 436., 419., 516., 667.};
	static double Wy [] = { 0., 6.49, 8.72, 11.5, 14.5, 18.4, 22.8, 23.1, 28.2, 28.6, 34.3,
										 34.5, 41.6, 41.5, 50.0, 49.9, 60.1, 59.9, 71.1, 86.1};
	static double iy [] = { 0., 1.22, 1.38, 1.55, 1.70, 1.88, 2.12, 2.07, 2.32, 2.27, 2.50,
										 2.37, 2.63, 2.54, 2.80, 2.69, 2.95, 2.79, 2.89, 3.03};
	static double out[] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT};
	static char * S0 [] = { "10", "12",  "14", "16",  "18", "18а", "20", "20а", "22", "22а",
									"24", "24а", "27", "27а", "30", "30а", "33", "36",  "40"};
	Table * table = GetGOSTDataBaseTable(19, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = A1;
		table->table[1].parm_values = A2;
		table->table[2].parm_values = B1;
		table->table[3].parm_values = B2;
		table->table[4].parm_values = R;
		table->table[5].parm_values = r;
		table->table[6].parm_values = S;
		table->table[7].parm_values = M;
		table->table[8].parm_values = Jx;
		table->table[9].parm_values = Wx;
		table->table[10].parm_values = ix;
		table->table[11].parm_values = Jy;
		table->table[12].parm_values = Wy;
		table->table[13].parm_values = iy;
		table->table[14].parm_values = out;
		table->table[15].parm_values = out;
		table->table[16].parm_values = out;
		table->table[17].parm_values = out;
		table->table[18].parm_values = out;
		table->table[19].parm_values = Sx;
		table->table[20].parm_values = out;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((double *)(table->table[0].parm_values))[k] = A1[k];
		((double *)(table->table[1].parm_values))[k] = A2[k];
		((double *)(table->table[2].parm_values))[k] = B1[k];
		((double *)(table->table[3].parm_values))[k] = B2[k];
		((double *)(table->table[4].parm_values))[k] = R[k];
		((double *)(table->table[5].parm_values))[k] = r[k];
		((double *)(table->table[6].parm_values))[k] = S[k];
		((double *)(table->table[7].parm_values))[k] = M[k];
		((double *)(table->table[8].parm_values))[k] = Jx[k];
		((double *)(table->table[9].parm_values))[k] = Wx[k]; 
		((double *)(table->table[10].parm_values))[k] = ix[k];
		((double *)(table->table[11].parm_values))[k] = Jy[k];
		((double *)(table->table[12].parm_values))[k] = Wy[k]; 
		((double *)(table->table[13].parm_values))[k] = iy[k];
		((double *)(table->table[14].parm_values))[k] = out[k];
		((double *)(table->table[15].parm_values))[k] = out[k];
		((double *)(table->table[16].parm_values))[k] = out[k];
		((double *)(table->table[17].parm_values))[k] = out[k];
		((double *)(table->table[18].parm_values))[k] = out[k];
		((double *)(table->table[19].parm_values))[k] = Sx[k];
		((double *)(table->table[20].parm_values))[k] = out[k];
	}
	return table;
}

////////////////////////////////////////////////////
//...таблицы для швеллеров по ГОСТУ (в системе CGS);
Table * gost_SU(int id_static_char)
{
	static double A1 [] = { 0.,  5.0,  6.5,  8.0, 10.0, 12.0, 14.0, 14.0, 16.0, 16.0, 18.0,
										 18.0, 20.0, 20.0, 22.0, 22.0, 24.0, 24.0, 27.0, 30.0, 33.0,
										 36.0, 40.0};
	static double A2 [] = { 0.,  3.2,  3.6, 4.0, 4.6, 5.2, 5.8, 6.2, 6.4,  6.8,  7.0,
										  7.4,  7.6, 8.0, 8.2, 8.7, 9.0, 9.5, 9.5, 10.0, 10.5,
										 11.0, 11.5};
	static double B1 [] = { 0.,  .44, .44, .45, .45, .48, .49, .49, .50, .50, .51,
										  .51, .52, .52, .54, .54, .56, .56, .60, .65, .70,
										  .75, .80};
	static double B2 [] = { 0.,  .70,  .72, .74, .76,  .78,  .81,  .87,  .84,  .90,  .87,
										  .93,  .90, .97, .95, 1.02, 1.00, 1.07, 1.05, 1.10, 1.17,
										 1.26, 1.35};
	static double R  [] = { 0., .60,  .60, .65,  .70,  .75,  .80,  .80,  .85,  .85,  .90,
										 .90,  .95, .95, 1.00, 1.00, 1.05, 1.05, 1.10, 1.20, 1.30,
										1.40, 1.50};
	static double r  [] = { 0., .25, .25, .25, .30, .30, .30, .30, .35, .35, .35,
										 .35, .40, .40, .40, .40, .40, .40, .45, .50, .50,
										 .60, .60};
	static double r1 [] = { 0., .35, .35, .35, .40, .45, .45, .45, .50, .50, .50,
										 .50, .55, .55, .60, .60, .60, .60, .65, .70, .75,
										 .85, .90};
	static double S  [] = { 0., 6.16, 7.51, 8.98, 10.9, 13.3, 15.6, 17.0, 18.1, 19.5, 20.7,
										 22.2, 23.4, 25.2, 26.7, 28.8, 30.6, 32.9, 35.2, 40.5, 46.5,
										 53.4, 61.5};
	static double M  [] = { 0., 4.84, 5.90, 7.05, 8.59, 10.4, 12.3, 13.3, 14.2, 15.3, 16.3,
										 17.4, 18.4, 19.8, 21.0, 22.6, 24.0, 25.8, 27.7, 31.8, 36.5,
										 41.9, 48.3};
	static double Jx [] = { 0., 22.8,    48.6,  89.4,  174.,  304.,  491.,  545.,  747.,  823., 1090.,
										 1190.,  1520., 1670., 2110., 2330., 2900., 3180., 4160., 5810., 7980.,
										10820., 15220.};
	static double Wx [] = { 0., 9.1, 15.0, 22.4, 34.8, 50.6, 70.2, 77.8, 93.4, 103., 121.,
										132., 152., 167., 192., 212., 242., 265., 308., 387., 484.,
										601., 761.};
	static double ix [] = { 0., 1.92, 2.54, 3.16, 3.99, 4.78, 5.60, 5.66, 6.42, 6.49, 7.24,
										 7.32, 8.07, 8.15, 8.89, 8.99, 9.73, 9.84, 10.9, 12.0, 13.1,
										 14.2, 15.7};
	static double Sx [] = { 0., 5.59,  9.00,  13.3,  20.4,  29.6,  40.8,  45.1,  54.1,  59.4,  69.8,
										 76.1,  87.8,  95.9,  110,  121,  139,  151,  178,  224,  281,
										 350,  444};
	static double Jy [] = { 0., 5.61, 8.70, 12.8, 20.4, 31.2, 45.4, 57.5, 63.3, 78.8, 86.0,
										 105., 113., 139., 151., 187., 208., 254., 262., 327., 410.,
										 513., 642.};
	static double Wy [] = { 0., 2.75, 3.68, 4.75, 6.46, 8.52, 11.0, 13.3, 13.8, 16.4, 17.0,
										 20.0, 20.5, 24.2, 25.1, 30.0, 31.6, 37.2, 37.3, 43.6, 51.8,
										 61.7, 73.4};
	static double iy [] = { 0., .954, 1.08, 1.19, 1.37, 1.53, 1.70, 1.84, 1.87, 2.01, 2.04,
										 2.18, 2.20, 2.35, 2.37, 2.55, 2.60, 2.78, 2.73, 2.84, 2.97,
										 3.10, 3.23};
	static double Z0 [] = { 0., 1.16, 1.24, 1.31, 1.44, 1.54, 1.67, 1.87, 1.80, 2.00, 1.94,
										 2.13, 2.07, 2.28, 2.21, 2.46, 2.42, 2.67, 2.47, 2.52, 2.59,
										 2.68, 2.75};
	static double out[] = { 0., MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT, MAX_HIT,
										 MAX_HIT, MAX_HIT};
	static char * S0 [] = { "5П",   "6,5П", "8П",  "10П", "12П", "14П", "14а", "16П", "16аП", "18П",
									"18аП", "20П",  "20а", "22П", "22а", "24П", "24а", "27П", "30П",  "33П",
									"36П",  "40П"};
	Table * table = GetGOSTDataBaseTable(22, S0, id_static_char);
	if (id_static_char == SPECIAL_STATE) {
		table->table[0].parm_values = A1;
		table->table[1].parm_values = A2;
		table->table[2].parm_values = B1;
		table->table[3].parm_values = B2;
		table->table[4].parm_values = R;
		table->table[5].parm_values = r;
		table->table[6].parm_values = S;
		table->table[7].parm_values = M;
		table->table[8].parm_values = Jx;
		table->table[9].parm_values = Wx;
		table->table[10].parm_values = ix;
		table->table[11].parm_values = Jy;
		table->table[12].parm_values = Wy;
		table->table[13].parm_values = iy;
		table->table[14].parm_values = out;
		table->table[15].parm_values = Z0;
		table->table[16].parm_values = r1;
		table->table[17].parm_values = out;
		table->table[18].parm_values = out;
		table->table[19].parm_values = Sx;
		table->table[20].parm_values = out;
	}
	else
	for (int k = 1; k <= table->N_group; k++) {
		((double *)(table->table[0].parm_values))[k] = A1[k];
		((double *)(table->table[1].parm_values))[k] = A2[k];
		((double *)(table->table[2].parm_values))[k] = B1[k];
		((double *)(table->table[3].parm_values))[k] = B2[k];
		((double *)(table->table[4].parm_values))[k] = R[k];
		((double *)(table->table[5].parm_values))[k] = r[k];
		((double *)(table->table[6].parm_values))[k] = S[k];
		((double *)(table->table[7].parm_values))[k] = M[k];
		((double *)(table->table[8].parm_values))[k] = Jx[k];
		((double *)(table->table[9].parm_values))[k] = Wx[k]; 
		((double *)(table->table[10].parm_values))[k] = ix[k];
		((double *)(table->table[11].parm_values))[k] = Jy[k];
		((double *)(table->table[12].parm_values))[k] = Wy[k]; 
		((double *)(table->table[13].parm_values))[k] = iy[k];
		((double *)(table->table[14].parm_values))[k] = out[k];
		((double *)(table->table[15].parm_values))[k] = Z0[k];
		((double *)(table->table[16].parm_values))[k] = r1[k];
		((double *)(table->table[17].parm_values))[k] = out[k];
		((double *)(table->table[18].parm_values))[k] = out[k];
		((double *)(table->table[19].parm_values))[k] = Sx[k];
		((double *)(table->table[20].parm_values))[k] = out[k];
	}
	return table;
}

/////////////////////////////////////////////
//...функция образования контекста для ГОСТА;
DLLFUNC void * CreateBARSGOSTContext(int N_sm)
{
	if (N_sm < 0 || N_sm >= NUM_BARS_GOST_SAMPLES) N_sm = 0;

	Context * cont = (Context *)new_struct(sizeof(Context));
	if (! cont) return(NULL);

	cont->N           = N_sm+SHIFT_BARS_GOST_SAMPLES;
	cont->static_char = SPECIAL_STATE;
	cont->sample_name = GetBARSGOSTSampleName(N_sm);

	switch (cont->N-SHIFT_BARS_GOST_SAMPLES) {
		case _LU_GOST: cont->table = gost_LU(cont->static_char); break; //...библиотека ГОСТА равнополочных уголков;
		case _LN_GOST: cont->table = gost_LN(cont->static_char); break; //...библиотека ГОСТА неравнополочных уголков;
		case _IU_GOST: cont->table = gost_IU(cont->static_char); break; //...библиотека ГОСТА для двутавров;
		case _SU_GOST: cont->table = gost_SU(cont->static_char); break; //...библиотека ГОСТА для швеллеров;
	}
	set_default(cont);
	set_table_units(cont->table, UNIT_CGS); return (void *)cont;
}

/////////////////////////////////////////////////////////////////
//...число 2D статических образцов-сечений для Bars25 и их имена;
int GetBARSSampleCount(void) { return(NUM_BARS_SAMPLES); }
char * GetBARSSampleName (int N_sm)
{
  static char * S[] = { "Circle",                           //_BARS1
                        "Ellipse",                          //_BARS2      
                        "Ring",                             //_BARS3
                        "Open ring",                        //_BARS4
                        "Ring sector",                      //_BARS5
                        "Sector",                           //_BARS6
                        "Circular segment",                 //_BARS7
                        "Shaft with keyway",                //_BARS8
                        "Hexagonal bar",                    //_BARS9
                        "Hexagonal tube",                   //_BARS10
                        "Equilateral triangle",             //_BARS11
                        "Triangle with rounded corners",    //_BARS12
                        "Rounded wedge",                    //_BARS13
                        "Square",                           //_BARS14      
                        "Rectangle",                        //_BARS15
                        "Quadrangle with rounded corners",  //_BARS16
                        "Wedge",                            //_BARS17
                        "Right corner",                     //_BARS18
                        "Corner",                           //_BARS19
                        "Corner with bubble",               //_BARS20
                        "Frame",                            //_BARS21    
                        "Triangle open frame",              //_BARS22
                        "Quadrangle open frame",            //_BARS23
                        "Arbitrary frame",                  //_BARS24
                        "Uncompleted arbitrary frame",      //_BARS25
                        "Trapezoidal tube",                 //_BARS26
                        "Right zed",                        //_BARS27
                        "Zed",                              //_BARS28
                        "Bordered zed",                     //_BARS29
                        "T-section",                        //_BARS30
                        "T-section with bubbles",           //_BARS31
                        "T-section with top bubble",        //_BARS32    
                        "Bordered T-section",               //_BARS33
                        "I-section",                        //_BARS34
                        "I-common",                         //_BARS35
                        "Schweller",                        //_BARS36
                        "Schweller with external bubbles",  //_BARS37
                        "Schweller with internal bubbles",  //_BARS38
                        "T-schweller with bubbles",         //_BARS39
                        "T-schweller",                      //_BARS40
                        "Right bordered schweller",         //_BARS41
                        "Trapesoidal bordered schweller",   //_BARS42
                        "Special schweller",                //_BARS43
                        "Zed-schweller",                    //_BARS44
                        "h-section",                        //_BARS45
                        "Triangle star",                    //_BARS46
                        "Bench-like profile",               //_BARS47    
                        "Cross",                            //_BARS48
                        "Spangout",                         //_BARS49
                        "Gear-like profile",                //_BARS50
                        "Trouph-like profile",              //_BARS51
                        "Trouph-like profile with cuffs",   //_BARS52
                        "Hook",                             //_BARS53
                        "Chain",                            //_CHAIN0
  };
  return S[N_sm];
}

//////////////////////////////////////////////
//...функция образования контекста для Bars25;
DLLFUNC void * CreateBARSContext(int N_sm)
{
  if (N_sm < 0 || N_sm >= NUM_BARS_SAMPLES) N_sm = 0;

  Context * cont = (Context *)new_struct(sizeof(Context));
  if (! cont) return(NULL);

  cont->N           = N_sm+SHIFT_BARS_SAMPLES;
  cont->static_char = N_sm == _CHAIN0 ? INITIAL_STATE : SPECIAL_STATE;
  cont->sample_name = GetBARSSampleName(N_sm);

  switch (cont->N-SHIFT_BARS_SAMPLES) {
		case _BARS1:  cont->table = circle				 (cont->static_char); break;
      case _BARS2:  cont->table = ellipse				 (cont->static_char); break;
      case _BARS3:  cont->table = ring					 (cont->static_char); break;
      case _BARS4:  cont->table = open_ring			 (cont->static_char); break;
      case _BARS5:  cont->table = ring_sector		 (cont->static_char); break;
      case _BARS6:  cont->table = sector				 (cont->static_char); break;
      case _BARS7:  cont->table = circ_segment		 (cont->static_char); break;
      case _BARS8:  cont->table = shaft_profile		 (cont->static_char); break;
      case _BARS9:  cont->table = hexa					 (cont->static_char); break;
      case _BARS10: cont->table = hexa_tube			 (cont->static_char); break;
      case _BARS11: cont->table = equi_triangle		 (cont->static_char); break;
      case _BARS12: cont->table = rounded_triangle	 (cont->static_char); break;
      case _BARS13: cont->table = rounded_wedge		 (cont->static_char); break;
      case _BARS14: cont->table = square				 (cont->static_char); break;
      case _BARS15: cont->table = rectangle			 (cont->static_char); break;
      case _BARS16: cont->table = rounded_quadrangle(cont->static_char); break;
		case _BARS17: cont->table = wedge				 (cont->static_char); break;
		case _BARS18: cont->table = right_corner		 (cont->static_char); break;
		case _BARS19: cont->table = corner				 (cont->static_char); break;
		case _BARS20: cont->table = bubble_corner		 (cont->static_char); break;
		case _BARS21: cont->table = frame				 (cont->static_char); break;
		case _BARS22: cont->table = triangle_frame	 (cont->static_char); break;
		case _BARS23: cont->table = quadrangle_frame  (cont->static_char); break;
		case _BARS24: cont->table = arbitrary_frame   (cont->static_char); break;
		case _BARS25: cont->table = un_frame			 (cont->static_char); break;
		case _BARS26: cont->table = trap_tube			 (cont->static_char); break;
		case _BARS27: cont->table = right_zed			 (cont->static_char); break;
		case _BARS28: cont->table = zed					 (cont->static_char); break;
		case _BARS29: cont->table = bordered_zed		 (cont->static_char); break;
		case _BARS30: cont->table = T_section			 (cont->static_char); break;
		case _BARS31: cont->table = T_bubbles			 (cont->static_char); break;
		case _BARS32: cont->table = T_top_bulba		 (cont->static_char); break;
		case _BARS33: cont->table = T_bordered			 (cont->static_char); break;
		case _BARS34: cont->table = I_section			 (cont->static_char); break;
		case _BARS35: cont->table = I_common			 (cont->static_char); break;
		case _BARS36: cont->table = schweller			 (cont->static_char); break;
		case _BARS37: cont->table = schweller_ext		 (cont->static_char); break;
		case _BARS38: cont->table = schweller_int		 (cont->static_char); break;
		case _BARS39: cont->table = T_shweller_bubbles(cont->static_char); break;
		case _BARS40: cont->table = T_shweller			 (cont->static_char); break;
		case _BARS41: cont->table = right_schweller	 (cont->static_char); break;
		case _BARS42: cont->table = trap_schweller	 (cont->static_char); break;
		case _BARS43: cont->table = special_schweller (cont->static_char); break;
		case _BARS44: cont->table = zed_schweller		 (cont->static_char); break;
		case _BARS45: cont->table = h_section			 (cont->static_char); break;
		case _BARS46: cont->table = triangle_star		 (cont->static_char); break;
		case _BARS47: cont->table = bench_profile		 (cont->static_char); break;
		case _BARS48: cont->table = cross				 (cont->static_char); break;
		case _BARS49: cont->table = spangout			 (cont->static_char); break;
		case _BARS50: cont->table = gear_profile		 (cont->static_char); break;
		case _BARS51: cont->table = trouph_profile	 (cont->static_char); break;
		case _BARS52: cont->table = cuffs_profile		 (cont->static_char); break;
		case _BARS53: cont->table = hook					 (cont->static_char); break;
		case _CHAIN0: cont->table = GetCSVTable(1, 8); break;
  }
  set_default(cont);
  set_table_units(cont->table, UNIT_CGS); return (void *)cont;
}

/*===============================================================================================*/
/*                                 ИНИЦИАЛИЗАЦИЯ ОБРАЗЦА                                         */
/*===============================================================================================*/
//////////////////////////////////////////////////////////////////////
//...пpедваpительная инициализация сечений для Bars25 и ГОСТа сечений;
int bars2D_init(void * context, CGrid * block_nd)
{
	Context * cont = (Context *)context;
	if (! is_BarsGOST2D(cont) && ! is_Bars2D(cont) || ! cont->table) return(0);
	
	Table * tab = cont->table;
	double metric = GetMetricLength(cont->units, tab->index > 0 ? tab->table_units[tab->index-1] : cont->units);

	cont->left = cont->right = cont->bottom = cont->top = cont->back = cont->front = 0.;

	if (cont->N != _NUM_BARS_SAMPLES-1+SHIFT_BARS_SAMPLES) 
		DeleteSample(cont->sm);

	if (is_BarsGOST2D(cont))
	switch (cont->N-SHIFT_BARS_GOST_SAMPLES) {
/*=================================================================*/
/*               БИБЛИОТЕКА ОБРАЗЦОВ СЕЧЕНИЙ ГОСТА                 */
/*=================================================================*/
		case _LU_GOST:
		case _LN_GOST: { 
						double A[2]= { ((double *)tab->table[1].parm_values)[tab->index]*metric,
											((double *)tab->table[0].parm_values)[tab->index]*metric },
								S[2] = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
											((double *)tab->table[3].parm_values)[tab->index]*metric },
								r[4] = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
											((double *)tab->table[5].parm_values)[tab->index]*metric,
											((double *)tab->table[5].parm_values)[tab->index]*metric, 0.};
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_corner(90., A, S, r);
		}           break;
      case _IU_GOST: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B[2]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[1].parm_values)[tab->index]*metric },
                          S[3]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric },
                          R[2]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_I_section(H, B, S, R, r);
		}           break;
      case _SU_GOST: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B[2]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[1].parm_values)[tab->index]*metric },
                          S[3]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          R[2]  = { ((double *)tab->table[16].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[16].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_schweller(H, B, S, r, R);
		}           break;
	}
	else
	switch (cont->N-SHIFT_BARS_SAMPLES) {
/*=============================================================================*/
/*               БИБЛИОТЕКА ПPОСТЕЙШИХ ОБРАЗЦОВ (ТИПА "CHAIN")                 */
/*=============================================================================*/
		case _BARS1: { 
						double r = ((double *)tab->table[0].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_circle_profile(r);
		}           break;
		case _BARS2: { 
                  double a = ((double *)tab->table[0].parm_values)[tab->index]*metric,
                         b = ((double *)tab->table[1].parm_values)[tab->index]*metric;

                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0) {
                      CCeBars * ce = new CCeBars;

                      ce->get_ellipt_profile(a, b);
                      cont->sm->init_blocks(ce);
                  }
                  double par[6] = {MAX_HIT, MIN_HIT, MAX_HIT, MIN_HIT, MAX_HIT, MIN_HIT};
                  for (int i = 0; i < cont->sm->N; i++) //...переустанавливаем рамку;
                      cont->sm->SkeletonBounding(cont->sm->B[i], par);

                  if (cont->sm->N) {
                      cont->left   = par[0];
                      cont->right  = par[1];
                      cont->bottom = par[2];
                      cont->top    = par[3]; 
                  }
		}           break;
      case _BARS3: { 
						double  r1 = ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  r0 = ((double *)tab->table[1].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_ring(r1, r0);
		}           break;
      case _BARS4: {
						double  r1 = ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  r0 = ((double *)tab->table[1].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_open_ring(r1, r0);
		}           break;
      case _BARS5: { 
						double  alpha = ((double *)tab->table[0].parm_values)[tab->index],
								  r1    = ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  r0    = ((double *)tab->table[2].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_ring_sector(alpha, r1, r0);
		}           break;
      case _BARS6: { 
						double  alpha = ((double *)tab->table[0].parm_values)[tab->index],
								  r     = ((double *)tab->table[1].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_sector(alpha, r);
		}           break;
      case _BARS7: { 
						double  alpha = ((double *)tab->table[0].parm_values)[tab->index],
								  r     = ((double *)tab->table[1].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_circ_segment(alpha, r);
		}           break;
      case _BARS8: { 
                  double  L = ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          h = ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          R = ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          r = ((double *)tab->table[3].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_shaft_profile(L, h, R, r);
		}           break;
      case _BARS9: { 
                  double r = ((double *)tab->table[0].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_hexa_profile(r);
		}           break;
      case _BARS10: { 
                  double  r = ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          S = ((double *)tab->table[1].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_hexa_tube(r, S);
		}           break;
      case _BARS11: { 
						double  A[3]  = { ((double *)tab->table[0].parm_values)[tab->index]*metric,
												((double *)tab->table[0].parm_values)[tab->index]*metric,
												((double *)tab->table[0].parm_values)[tab->index]*metric },
								  r[3]  = { 0., 0., 0. };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_rounded_triangle(A, r);
      }           break;
      case _BARS12: { 
						double  A[3]  = { ((double *)tab->table[0].parm_values)[tab->index]*metric,
												((double *)tab->table[1].parm_values)[tab->index]*metric,
												((double *)tab->table[2].parm_values)[tab->index]*metric },
								  r[3]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
												((double *)tab->table[5].parm_values)[tab->index]*metric,
												((double *)tab->table[3].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_rounded_triangle(A, r);
      }           break;
      case _BARS13: { 
						double  H = ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  B = ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  r = ((double *)tab->table[2].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_rounded_wedge(H, B, r);
      }           break;
      case _BARS14: { 
						double A = ((double *)tab->table[0].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_rect_profile(A, A);
      }           break;
      case _BARS15: { 
						double  A = ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B = ((double *)tab->table[1].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_rect_profile(A, B);
      }           break;
      case _BARS16: { 
						double  alpha =   ((double *)tab->table[0].parm_values)[tab->index],
								  A[4]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
												((double *)tab->table[2].parm_values)[tab->index]*metric,
												((double *)tab->table[3].parm_values)[tab->index]*metric,
												((double *)tab->table[4].parm_values)[tab->index]*metric },
								  r[4]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
												((double *)tab->table[7].parm_values)[tab->index]*metric,
												((double *)tab->table[8].parm_values)[tab->index]*metric,
												((double *)tab->table[5].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_rounded_quadrangle(alpha, A, r);
      }           break;
      case _BARS17: { 
						double  H = ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  B = ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  h = ((double *)tab->table[2].parm_values)[tab->index]*metric,
								  r = ((double *)tab->table[3].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_wedge(H, B, h, r);
      }           break;
      case _BARS18: {
						double A[2]= { ((double *)tab->table[0].parm_values)[tab->index]*metric,
											((double *)tab->table[1].parm_values)[tab->index]*metric },
								S[2] = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
											((double *)tab->table[3].parm_values)[tab->index]*metric },
								r[4] = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
											((double *)tab->table[5].parm_values)[tab->index]*metric,
											((double *)tab->table[6].parm_values)[tab->index]*metric,
											((double *)tab->table[7].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_corner(90., A, S, r);
		}           break;
      case _BARS19: { 
						double  alpha =   ((double *)tab->table[0].parm_values)[tab->index],
								  A[2]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
												((double *)tab->table[2].parm_values)[tab->index]*metric },
								  S[2]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
												((double *)tab->table[4].parm_values)[tab->index]*metric },
								  r[4]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
												((double *)tab->table[6].parm_values)[tab->index]*metric,
												((double *)tab->table[7].parm_values)[tab->index]*metric,
												((double *)tab->table[8].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_corner(alpha, A, S, r);
		}           break;
      case _BARS20: { 
						double  A[2]  = { ((double *)tab->table[0].parm_values)[tab->index]*metric,
												((double *)tab->table[1].parm_values)[tab->index]*metric },
								  S[2]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
												((double *)tab->table[3].parm_values)[tab->index]*metric },
								  R     =   ((double *)tab->table[4].parm_values)[tab->index]*metric,
								  r[4]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
												((double *)tab->table[6].parm_values)[tab->index]*metric,
												((double *)tab->table[7].parm_values)[tab->index]*metric,
												((double *)tab->table[8].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_bubble_corner(A, S, R, r);
		}           break;
      case _BARS21: {
						double  A     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  t[4]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
												((double *)tab->table[3].parm_values)[tab->index]*metric,
												((double *)tab->table[4].parm_values)[tab->index]*metric,
												((double *)tab->table[5].parm_values)[tab->index]*metric },
								  r[4]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
												((double *)tab->table[7].parm_values)[tab->index]*metric,
												((double *)tab->table[8].parm_values)[tab->index]*metric,
												((double *)tab->table[9].parm_values)[tab->index]*metric },
								  R[4]  = { ((double *)tab->table[10].parm_values)[tab->index]*metric,
												((double *)tab->table[11].parm_values)[tab->index]*metric,
												((double *)tab->table[12].parm_values)[tab->index]*metric,
												((double *)tab->table[13].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_frame(A, B, t, r, R);
		}           break;
      case _BARS22: { 
						double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  d     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
								  h[2]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
												((double *)tab->table[4].parm_values)[tab->index]*metric },
								  r[3]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
												((double *)tab->table[6].parm_values)[tab->index]*metric,
												((double *)tab->table[7].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_triangle_frame(H, B, d, h, r);
		}           break;
      case _BARS23: { 
						double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  l[2]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
												((double *)tab->table[3].parm_values)[tab->index]*metric },
								  b[2]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
												((double *)tab->table[5].parm_values)[tab->index]*metric },
								  h[2]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
												((double *)tab->table[7].parm_values)[tab->index]*metric },
								  r[4]  = { ((double *)tab->table[8].parm_values)[tab->index]*metric,
												((double *)tab->table[9].parm_values)[tab->index]*metric,
												((double *)tab->table[10].parm_values)[tab->index]*metric,
												((double *)tab->table[11].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_quadrangle_frame(H, B, l, b, h, r);
		}           break;
      case _BARS24: { 
                  double  alpha =   ((double *)tab->table[0].parm_values)[tab->index],
                          A[4]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          S[4]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[8].parm_values)[tab->index]*metric },
                          r[4]  = { ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[10].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[11].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[12].parm_values)[tab->index]*metric },
                          R[4]  = { ((double *)tab->table[13].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[14].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[15].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[16].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_arbitrary_frame(alpha, A, S, r, R);
		}           break;
      case _BARS25: { 
                  double  alpha[3] = { ((double *)tab->table[0].parm_values)[tab->index],
                                       ((double *)tab->table[1].parm_values)[tab->index],
                                       ((double *)tab->table[2].parm_values)[tab->index] },
                          A[4]     = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[6].parm_values)[tab->index]*metric },
                          S[4]     = { ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[10].parm_values)[tab->index]*metric },
                          r[3]     = { ((double *)tab->table[11].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[12].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[13].parm_values)[tab->index]*metric },
                          R[3]     = { ((double *)tab->table[14].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[15].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[16].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_un_frame(alpha, A, S, r, R);
		}           break;
      case _BARS26: { 
                  double  H = ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          A = ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          B = ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S = ((double *)tab->table[3].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_trap_tube(H, A, B, S);
		}           break;
      case _BARS27: { 
						double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  B[2]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
												((double *)tab->table[2].parm_values)[tab->index]*metric },
								  S[3]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
												((double *)tab->table[4].parm_values)[tab->index]*metric,
												((double *)tab->table[5].parm_values)[tab->index]*metric },
								  R[2]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
												((double *)tab->table[7].parm_values)[tab->index]*metric },
								  r[4]  = { ((double *)tab->table[8].parm_values)[tab->index]*metric,
												((double *)tab->table[9].parm_values)[tab->index]*metric,
												((double *)tab->table[10].parm_values)[tab->index]*metric,
												((double *)tab->table[11].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_right_zed(H, B, S, R, r);
		}           break;
      case _BARS28: { 
                  double  alpha[2] = { ((double *)tab->table[0].parm_values)[tab->index],
                                       ((double *)tab->table[1].parm_values)[tab->index] },
                          H        =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          B[2]     = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          S[3]     = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[7].parm_values)[tab->index]*metric },
                          R[2]     = { ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[9].parm_values)[tab->index]*metric },
                          r[4]     = { ((double *)tab->table[10].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[11].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[12].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[13].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_zed(alpha, H, B, S, R, r);
		}           break;
      case _BARS29: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          S     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          h     =   ((double *)tab->table[3].parm_values)[tab->index]*metric,
                          R[2]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          r     =   ((double *)tab->table[6].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_bordered_zed(H, B, S, h, R, r);
		}           break;
      case _BARS30: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric },
                          r[3]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_T_section(H, B, S, r);
		}           break;
      case _BARS31: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric },
                          R     =   ((double *)tab->table[4].parm_values)[tab->index]*metric,
                          r[3]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_T_bubbles(H, B, R, S, r);
		}           break;
      case _BARS32: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric },
                          R     =   ((double *)tab->table[4].parm_values)[tab->index]*metric,
                          r[3]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_T_top_bulba(H, B, R, S, r);
		}           break;
      case _BARS33: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          h     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S[3]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_T_bordered(H, B, h, S, r);
		}           break;
      case _BARS34: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B[2]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[2].parm_values)[tab->index]*metric },
                          S[3]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          R[2]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[9].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_I_section(H, B, S, R, r);
		}           break;
      case _BARS35: { 
						double  B = ((double *)tab->table[0].parm_values)[tab->index]*metric,
								  a = ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  b = ((double *)tab->table[2].parm_values)[tab->index]*metric,
								  c = ((double *)tab->table[3].parm_values)[tab->index]*metric,
								  d = ((double *)tab->table[4].parm_values)[tab->index]*metric,
								  e = ((double *)tab->table[5].parm_values)[tab->index]*metric,
								  f = ((double *)tab->table[6].parm_values)[tab->index]*metric,
								  g = ((double *)tab->table[7].parm_values)[tab->index]*metric,
								  h = ((double *)tab->table[8].parm_values)[tab->index]*metric,
								  H = ((double *)tab->table[9].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_I_common(H, B, a, b, c, d, e, f, g, h);
      }           break;
      case _BARS36: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B[2]  = { ((double *)tab->table[1].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[2].parm_values)[tab->index]*metric },
                          S[3]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric },
                          R[2]  = { ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[9].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_schweller(H, B, S, r, R);
		}           break;
      case _BARS37: { 
                  double  H     = ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     = ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          S     = ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          d     = ((double *)tab->table[3].parm_values)[tab->index]*metric,
                          r     = ((double *)tab->table[4].parm_values)[tab->index]*metric,
                          R     = ((double *)tab->table[5].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_schweller_ext(H, B, S, d, r, R);
		}           break;
      case _BARS38: { 
                  double  H     = ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     = ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          S     = ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          d     = ((double *)tab->table[3].parm_values)[tab->index]*metric,
                          r     = ((double *)tab->table[4].parm_values)[tab->index]*metric,
                          R     = ((double *)tab->table[5].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_schweller_int(H, B, S, d, r, R);
		}           break;
      case _BARS39: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          L     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          b     =   ((double *)tab->table[3].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          R[2]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric },
                          r     =   ((double *)tab->table[8].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_T_schweller_bubbles(H, B, L, b, S, R, r);
		}           break;
      case _BARS40: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          a     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          R     =   ((double *)tab->table[5].parm_values)[tab->index]*metric,
                          r     =   ((double *)tab->table[6].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_T_schweller(H, B, a, S, R, r);
		}           break;
      case _BARS41: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          b     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S[3]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[7].parm_values)[tab->index]*metric },
                          R[3]  = { ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[10].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_right_schweller(H, B, b, S, r, R);
		}           break;
      case _BARS42: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          A     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          C     =   ((double *)tab->table[3].parm_values)[tab->index]*metric,
                          S[3]  = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[8].parm_values)[tab->index]*metric },
                          R[3]  = { ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[10].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[11].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_trap_schweller(H, B, A, C, S, r, R);
		}           break;
      case _BARS43: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          h     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric },
                          R[2]  = { ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[8].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_special_schweller(H, B, h, S, r, R);
		}           break;
      case _BARS44: { 
                  double  alpha[3] = { ((double *)tab->table[0].parm_values)[tab->index],
                                       ((double *)tab->table[1].parm_values)[tab->index],
                                       ((double *)tab->table[2].parm_values)[tab->index] },
                          A[4]     = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[6].parm_values)[tab->index]*metric },
                          S[4]     = { ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[10].parm_values)[tab->index]*metric },
                          r[3]     = { ((double *)tab->table[11].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[12].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[13].parm_values)[tab->index]*metric },
                          R[3]     = { ((double *)tab->table[14].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[15].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[16].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_zed_schweller(alpha, A, S, r, R);
		}           break;
      case _BARS45: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          B     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          h     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S[3]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[5].parm_values)[tab->index]*metric },
                          R     =   ((double *)tab->table[6].parm_values)[tab->index]*metric,
                          r[3]  = { ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[9].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_h_section(H, B, h, S, R, r);
		}           break;
      case _BARS46: { 
                  double  alpha =   ((double *)tab->table[0].parm_values)[tab->index],
                          H     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          L     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_triangle_star(alpha, H, L, S, r);
		}           break;
      case _BARS47: { 
                  double  alpha =   ((double *)tab->table[0].parm_values)[tab->index],
                          L     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          l     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
                          S[2]  = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_bench_profile(alpha, L, l, S, r);
		}           break;
      case _BARS48: { 
                  double  H     =   ((double *)tab->table[0].parm_values)[tab->index]*metric,
                          L     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          S[3]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[4].parm_values)[tab->index]*metric },
                          r[2]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[6].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_cross(H, L, S, r);
		}           break;
      case _BARS49: { 
						double  alpha =   ((double *)tab->table[0].parm_values)[tab->index],
								  L     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
								  A     =   ((double *)tab->table[2].parm_values)[tab->index]*metric,
								  B     =   ((double *)tab->table[3].parm_values)[tab->index]*metric,
								  C     =   ((double *)tab->table[4].parm_values)[tab->index]*metric,
								  l[2]  = { ((double *)tab->table[5].parm_values)[tab->index]*metric,
												((double *)tab->table[6].parm_values)[tab->index]*metric },
								  h[3]  = { ((double *)tab->table[7].parm_values)[tab->index]*metric,
												((double *)tab->table[8].parm_values)[tab->index]*metric,
												((double *)tab->table[9].parm_values)[tab->index]*metric },
								  S[4]  = { ((double *)tab->table[10].parm_values)[tab->index]*metric,
												((double *)tab->table[11].parm_values)[tab->index]*metric,
												((double *)tab->table[12].parm_values)[tab->index]*metric,
												((double *)tab->table[13].parm_values)[tab->index]*metric },
								  r[3]  = { ((double *)tab->table[14].parm_values)[tab->index]*metric,
												((double *)tab->table[15].parm_values)[tab->index]*metric,
												((double *)tab->table[16].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_spangout(alpha, L, A, B, C, l, h, S, r);

      }           break;
      case _BARS50: { 
                  int     N     =   ((int    *)tab->table[0].parm_values)[tab->index];
                  double  L     =   ((double *)tab->table[1].parm_values)[tab->index]*metric,
                          R[2]  = { ((double *)tab->table[2].parm_values)[tab->index]*metric,
                                    ((double *)tab->table[3].parm_values)[tab->index]*metric },
                          r     =   ((double *)tab->table[4].parm_values)[tab->index]*metric;
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_gear_profile(N, L, R, r);
		}           break;
      case _BARS51: { 
                  double  alpha[4] = { ((double *)tab->table[0].parm_values)[tab->index],
                                       ((double *)tab->table[1].parm_values)[tab->index],
                                       ((double *)tab->table[2].parm_values)[tab->index],
                                       ((double *)tab->table[3].parm_values)[tab->index] },
                          A[5]     = { ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[8].parm_values)[tab->index]*metric },
                          S[5]     = { ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[10].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[11].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[12].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[13].parm_values)[tab->index]*metric },
                          r[4]     = { ((double *)tab->table[14].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[15].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[16].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[17].parm_values)[tab->index]*metric },
                          R[4]     = { ((double *)tab->table[18].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[19].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[20].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[21].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_trouph_profile(alpha, A, S, r, R);
		}           break;
      case _BARS52: { 
                  double  alpha[6] = { ((double *)tab->table[0].parm_values)[tab->index],
                                       ((double *)tab->table[1].parm_values)[tab->index],
                                       ((double *)tab->table[2].parm_values)[tab->index],
                                       ((double *)tab->table[3].parm_values)[tab->index],
                                       ((double *)tab->table[4].parm_values)[tab->index],
                                       ((double *)tab->table[5].parm_values)[tab->index] },
                          A[7]     = { ((double *)tab->table[6].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[10].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[11].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[12].parm_values)[tab->index]*metric },
                          S[7]     = { ((double *)tab->table[13].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[14].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[15].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[16].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[17].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[18].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[19].parm_values)[tab->index]*metric },
                          r[6]     = { ((double *)tab->table[20].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[21].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[22].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[23].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[24].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[25].parm_values)[tab->index]*metric },
                          R[6]     = { ((double *)tab->table[26].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[27].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[28].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[29].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[30].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[31].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_cuffs_profile(alpha, A, S, r, R);
		}           break;
      case _BARS53: { 
                  double  alpha[3] = { ((double *)tab->table[0].parm_values)[tab->index],
                                       ((double *)tab->table[1].parm_values)[tab->index],
                                       ((double *)tab->table[2].parm_values)[tab->index] },
                          A[4]     = { ((double *)tab->table[3].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[4].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[5].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[6].parm_values)[tab->index]*metric },
                          S[4]     = { ((double *)tab->table[7].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[8].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[9].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[10].parm_values)[tab->index]*metric },
                          r[3]     = { ((double *)tab->table[11].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[12].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[13].parm_values)[tab->index]*metric },
                          R[3]     = { ((double *)tab->table[14].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[15].parm_values)[tab->index]*metric,
                                       ((double *)tab->table[16].parm_values)[tab->index]*metric };
                  if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0)
							((CBars25 *)cont->sm)->get_hook(alpha, A, S, r, R);
		}           break;
		case _CHAIN0: { 
						if ((cont->sm = CreateSample(BARS25_SAMPLE)) != 0) {
							int N_group = GetNGroup(cont), 
								 N_param = GetNParam(cont), k = 0, i, j;
							for (i = 0; i < N_group; i++, k += (int)user_strlen(STRSEPARATOR))
							for (j = 0; j < N_param; j++, k += (int)user_strlen(PARSEPARATOR))
								k += (int)user_strlen((char *)(unsigned short)GetTableParam(cont, i+1, j));

							char * CHAIN = (char *)new_struct((k+1)*sizeof(char));
							for (i = 0; i < N_group; i++, user_strcat(CHAIN, STRSEPARATOR))
							for (j = 0; j < N_param; j++, user_strcat(CHAIN, PARSEPARATOR)) 
								user_strcat(CHAIN, (char *)(unsigned short)GetTableParam(cont, i+1, j));

							((CBars25 *)cont->sm)->get_chain0(CHAIN, cont->concat, cont->units);
							delete_struct(CHAIN);
						}
		}           break;
  }
  if (cont->sm) {
	  ((CBars25 *)cont->sm)->bar_main();
	  ((CBars25 *)cont->sm)->bar_inertia_moms();
	  ((CBars25 *)cont->sm)->bar_frame(cont->left, cont->right, cont->bottom, cont->top);
	  ((CBars25 *)cont->sm)->ID_YOUNG_MODUL()[0] = cont->E;
	  ((CBars25 *)cont->sm)->ID_YOUNG_MODUL()[1] = cont->nju;
  }
  return(cont->sm != NULL);
}

/*
//////////////////////////////////////////////////////////////////////
//...pешатель функций фоpмы для 2D образца (задачи пограничного слоя);
int skin2D_solv(void * context, int & sec, int & hund, int id_solv)
{
    Context  * cont = (Context *)context; sec = hund = 0;
    if ((is_Skin2D(cont) || is_SkGp3D(cont) || is_SkIb3D(cont)) && cont->sm && ! cont->sm->solv) {
        CSample * sm = cont->sm;

///////////////////////////
//...solving of the probem;
        clock_t start = clock();
        int  counting = (cont->N == _NUM_SK2D_SAMPLES-1+SHIFT_SK2D_SAMPLES ? 
                         ANALYTICAL_COUNTING : 
                             BASIC_COUNTING);

        if (sm->counting_kernel(counting) != OK_COUNTING) {
            Message("Error in sample counting...");

            if (sm->solver)
                sm->solver->release_matrix();

            return(0);
        }
        Message("O'K");
        if (id_solv & MASK9) cont->sm->solv = 1;

////////////////////////////////////////////
//...фиксируем время и выходим из программы;
        timing_process(start, & hund, & sec);
    }
    return(1);
}
*/
//////////////////////////////////////////////////////////
//...результаты для 2D образца (задачи пограничного слоя);
char * GetFuncBARSName(int num)
{ static char *L[]={ "Full displacement",    //_BARS1
                     "Classic displacement", //_BARS2
                     "Full normal stress",   //_BARS3
                     "Classic normal stress",//_BARS4
                     "Full shear stress",    //_BARS5
                     "Classic shear stress"  //_BARS6
                   };
  return L[num];
}
/*
void solver_SK(void * context, CGrid * nd, double * F, double * par, int id_F)
{
  Context * cont = (Context *)context;
  if (cont && cont->sm && nd && F) {
      int id_block, l;

////////////////////////////////////
//...обpабатываем все входные точки;
      if (nd->X && nd->Y && cont->sm->B)
      for (l = 0; l < nd->N; l++) {
           if (nd->hit) id_block = nd->hit[l];
           else         id_block = -1;
//////////////////////////////////
//...search for appropriate block;
           if (id_block < 0 && Sph3D_struc_in(cont->sm, id_block, nd->X[l], nd->Y[l], 0.) &&
               cont->sm->B[id_block].link && par  &&
               cont->sm->B[id_block].link[0] == 6 && cont->sm->bar && 
             ((CCeDemo *) cont->sm->bar)->in_test_inclusion2D(nd->X[l], nd->Y[l], par) != -cont->sm->B[id_block].link[5])
               id_block = cont->sm->B[id_block].link[6];
//////////////////////
//...data calculation;
           if (id_block >= 0 && id_block < cont->sm->N) {
               double FF[3] = {0., 0., 0.};
               switch (id_F) {
                      case _FK1: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 2);
                            F[l] = FF[0];
                            break;
                      case _FK2: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 0);
                            F[l] = FF[0];
                            break;
                      case _FK3: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 5);
                            F[l] = FF[0];
                            break;
                      case _FK4: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 3);
                            F[l] = FF[0];
                            break;
                      case _FK5: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 5);
                            F[l] = FF[1];
                            break;
                      case _FK6: cont->sm->GetFuncAllValues(nd->X[l], nd->Y[l], 0., FF, id_block, 3);
                            F[l] = FF[1];
                            break;
                      case _NUM_SK_FUNCTIONS: 
                            F[l] = id_block;
                      default:
                            F[l] = 0.;
               }
           }
           if (nd->hit) nd->hit[l] = id_block;
      }
  }
}
*/

/////////////////////////////////////////////////////////////////
//...интерфейсные функции для взаимодействия с внешними модулями;
double get_square_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double S = sm ? sm->ID_INERTIA_MOM()[0] : MAX_HIT;
   SetSample(context, sm);
   return S;
}
double get_inertia_Y_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double IY = sm ? sm->ID_INERTIA_MOM()[1] : MAX_HIT;
   SetSample(context, sm);
   return IY;
}
double get_inertia_Z_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double IZ = sm ? sm->ID_INERTIA_MOM()[2] : MAX_HIT;
   SetSample(context, sm);
   return IZ;
}
double get_inertia_YZ_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double IYZ = sm ? sm->ID_INERTIA_MOM()[3] : MAX_HIT;
   SetSample(context, sm);
   return IYZ;
}
double get_static_Y_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double IY = sm ? -sm->ID_INERTIA_MOM()[4]*.5/(1.+sm->ID_YOUNG_MODUL()[1]) : MAX_HIT;
   SetSample(context, sm);
   return IY;
}
double get_static_Z_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double IZ = sm ? sm->ID_INERTIA_MOM()[5]*.5/(1.+sm->ID_YOUNG_MODUL()[1]) : MAX_HIT;
   SetSample(context, sm);
   return IZ;
}
double get_torsion_J_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double J = sm ? sm->ID_TORSION_MOM()[0] : MAX_HIT;
   SetSample(context, sm);
   return J;
}
double get_E_core_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double nju = sm ? sm->ID_YOUNG_MODUL()[0] : MAX_HIT;
   SetSample(context, sm);
   return nju;
}
double get_nju_core_bars(void * context)
{
   CBars25 * sm = (CBars25 *)GetSample(context);
   double nju = sm ? sm->ID_YOUNG_MODUL()[1] : MAX_HIT;
   SetSample(context, sm);
   return nju;
}
#endif
#undef  Message
